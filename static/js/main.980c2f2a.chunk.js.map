{"version":3,"sources":["redux/action.js","properties.js","components/History/History.js","constants/threshold.js","components/UploadImage/UploadImage.js","components/Header/Header.js","components/Radiology/Radiology.js","components/Login/Login.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","components/Signup/Signup.js","index.js"],"names":["login","status","type","payload","userName","userId","history","result","server","History","props","getData","setState","loading","fetch","method","mode","headers","then","respose","sessionStorage","clear","loginAction","window","location","replace","historyAction","json","responseJson","console","log","accessToken","config","configuration","data","isUpdate","catch","e","calculate","userAccessId","body","JSON","stringify","cardiomegaly","state","edema","consolidation","atelectasis","pleural_effusion","active_tuberculosis","healed_tuberculosis","metastasis","mass_lesion","calcification","none","getItem","response","access_token","setItem","open","alertMessage","error","page","content","length","style","flexGrow","padding","margin","Grid","container","item","direction","sm","wrap","alignItems","alignContent","justify","spacing","Typography","variant","chartData","score","toFixed","colors","maxWidth","marginBottom","src","processed_image_path","alt","report_path","href","target","fontSize","width","height","tick","dataKey","interval","domain","align","layout","verticalAlign","map","entry","i","key","color","listStyleType","name","fill","stroke","Table","border","TableBody","TableRow","TableCell","FormControlLabel","control","Radio","checked","userInput","disabled","radiologistInput","allow_radiologist_reassess","Checkbox","onChange","Button","onClick","id","shape","size","Pagination","count","event","value","alert","Snackbar","anchorOrigin","vertical","horizontal","onClose","autoHideDuration","message","inputSelection","feedbackChangeHandler","index","findIndex","x","userFeedback","user_access_details_id","newState","updateFeedbackHandler","feedback","home","this","minHeight","CircularProgress","disableShrink","Component","connect","dispatch","resultAction","withStyles","theme","offset","mixins","toolbar","root","paper","textAlign","palette","text","secondary","img","display","maxHeight","justifyContent","threshold","Input","styled","UploadImage","onChangeHandlerXray","reader","FileReader","file","files","selectedXrayFile","xrayPreview","xrayFileName","fileName","extension","substring","lastIndexOf","onloadend","invalidFile","readAsDataURL","onChangeHandlerReport","selectedReportFile","reportPreview","reportFileName","selectedFile","xray","report","FormData","append","limit","responseData","undefined","uploadImage","htmlFor","endIcon","PhotoCamera","component","marginTop","FormGroup","label","marginRight","goHome","reload","isError","Dialog","DialogTitle","backgroundColor","DialogContent","DialogContentText","DialogActions","d","split","TableContainer","minWidth","List","flexDirection","flexWrap","paddingLeft","submitFeedback","FormControl","RadioGroup","feedbackResponseId","feedbackSubmitted","preview","isFeedbackSet","userAction","userNameAction","upload","Header","header","AppBar","position","Toolbar","logout","drawer","Radiology","radiology","xhr","XMLHttpRequest","image_path","send","marginLeft","pageNumber","Login","ckeckInput","msg","username","password","onSubmit","TextField","fullWidth","App","Boolean","hostname","match","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","Signup","email","is_radiologist","signup","Switch","defaultValue","labelPlacement","ReactDOM","render","path","element","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.980c2f2a.chunk.js","sourcesContent":["export const LOGIN = 'LOGIN'\nexport const USER_NAME = 'USER_NAME'\nexport const USER_ID = 'USER_ID'\nexport const HISTORY = 'HISTORY'\nexport const RESULT = 'RESULT'\n\nexport const login = (status) => {\n    return{\n        type: LOGIN,\n        payload: status\n    }\n}\n\nexport const userName = (userName) => {\n    return{\n        type: USER_NAME,\n        payload: userName\n    }\n}\n\nexport const userId = (userId) => {\n    return{\n        type: USER_ID,\n        payload: userId\n    }\n}\n\nexport const history = (status) => {\n    return {\n        type: HISTORY,\n        payload: status\n    }\n}\n\nexport const result = (status) => {\n    return {\n        type: RESULT,\n        payload: status\n    }\n}\n","// export const server = 'http://localhost:8182'\nexport const server = 'https://xray1.deepnets.in'\n","import React from 'react';\nimport { Component } from 'react';\nimport './History.css';\nimport UploadImage from '../UploadImage/UploadImage';\nimport { connect } from 'react-redux';\nimport { login, history, result } from '../../redux/action';\nimport { server } from '../../properties';\nimport { XAxis, YAxis, Bar, Legend, Line, ComposedChart, Cell } from 'recharts';\nimport {\n    Grid,\n    TableBody,\n    TableRow,\n    TableCell,\n    withStyles,\n    Typography,\n    FormControlLabel,\n    Radio,\n    RadioGroup,\n    Table,\n    CircularProgress, Snackbar, FormControl, FormGroup, Button, Checkbox\n} from '@material-ui/core';\nimport { Pagination } from '@material-ui/lab';\nimport { Tooltip } from 'recharts';\n\nconst styles = theme => ({\n    offset: theme.mixins.toolbar,\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n    img: {\n        margin: 'auto',\n        display: 'block',\n        maxWidth: '400',\n        maxHeight: '400',\n    },\n    item: {\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n    }\n})\n\nclass History extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            key: [],\n            home: false,\n            loading: false,\n            open: false,\n            message: '',\n            page: 1,\n            content: null,\n            isUpdate: false,\n            inputSelection: 0,\n            config: [],\n        }\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    getData = () => {\n        this.setState({ loading: true })\n        fetch(server + '/history', {\n            method: 'GET',\n            mode: 'cors',\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"Access-Control-Allow-Origin\": \"*\",\n                // \"x-access-token\": sessionStorage.getItem('access_token'),\n                // \"x-refresh-token\": sessionStorage.getItem('refresh_token')\n            }\n        }).then(respose => {\n            if (respose.status === 401) {\n                sessionStorage.clear();\n                this.props.loginAction(false);\n                window.location.replace('/')\n            } else if (respose.status === 200) {\n                this.props.historyAction(true);\n            }\n            return respose.json()\n        })\n            .then(responseJson => {\n                console.log(responseJson)\n                if (responseJson.accessToken) {\n                    console.log('token: ', responseJson.accessToken)\n                    // sessionStorage.setItem('access_token', responseJson.accessToken)\n                }\n                this.setState({\n                    config: responseJson.configuration,\n                    data: responseJson.data,\n                    loading: false,\n                    isUpdate: false\n                })\n            }).catch(e => console.log(e))\n    }\n\n\n    calculate = (userAccessId) => {\n        this.setState({\n            loading: true\n        })\n        fetch(server + \"/userInput\", {\n            method: 'PUT',\n            mode: 'cors',\n            body: JSON.stringify({\n                cardiomegaly: this.state.cardiomegaly,\n                edema: this.state.edema,\n                consolidation: this.state.consolidation,\n                atelectasis: this.state.atelectasis,\n                pleural_effusion: this.state.pleural_effusion,\n                active_tuberculosis: this.state.active_tuberculosis,\n                healed_tuberculosis: this.state.healed_tuberculosis,\n                metastasis: this.state.metastasis,\n                mass_lesion: this.state.mass_lesion,\n                calcification: this.state.calcification,\n                none: this.state.none,\n                userAccessId: userAccessId,\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-access-token\": sessionStorage.getItem('access_token'),\n                \"x-refresh-token\": sessionStorage.getItem('refresh_token')\n            },\n        }).then(response => {\n            if (response.status === 401) {\n                sessionStorage.clear();\n                this.props.loginAction(false);\n                window.location.replace('/')\n            }\n            return response.json()\n        })\n            .then(responseJson => {\n                console.log(responseJson)\n                if (responseJson.access_token) {\n                    sessionStorage.setItem('access_token', responseJson.access_token)\n                }\n                if (responseJson.status === 500) {\n                    this.setState({\n                        loading: false,\n                        open: true,\n                        alertMessage: 'Something went wrong, please contact system admin',\n                        isUpdate: false\n                    })\n                } else {\n                    this.getData()\n                    console.log(this.state)\n                }\n            })\n            .catch(error => console.log(error))\n    }\n\n    history = () => {\n        var { data, page, content } = this.state;\n        if (data.length === 0 && content === null) {\n            return (\n                <div style={{ flexGrow: 1, padding: '3%', margin: '3%' }}>\n                    <Grid container item direction='column' sm wrap='wrap' alignItems='center' alignContent='center' justify='center' spacing={2} >\n                        <Typography variant='h3'>\n                            No AI data found\n                        </Typography>\n                    </Grid>\n                </div>\n            )\n        } else {\n            content = data[page - 1]\n            const chartData = [\n                {\n                    'name': 'Cardiomegaly',\n                    'value': (content.score.cardiomegaly * 100).toFixed(2),\n                    'threshold': 46.52,\n                }, {\n                    'name': 'Edema',\n                    'value': (content.score.edema * 100).toFixed(2),\n                    'threshold': 71.05,\n                }, {\n                    'name': 'Consolidation',\n                    'value': (content.score.consolidation * 100).toFixed(2),\n                    'threshold': 65.9,\n                }, {\n                    'name': 'Atelectasis',\n                    'value': (content.score.atelectasis * 100).toFixed(2),\n                    'threshold': 54.93,\n                }, {\n                    'name': 'Pleural Effusion',\n                    'value': (content.score.pleural_effusion * 100).toFixed(2),\n                    'threshold': 34.61,\n                }\n            ]\n            const colors = ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921']\n            return (\n                <div style={{ flexGrow: 1, margin: '1.5%' }}>\n                    <Grid container item direction='column' sm wrap='wrap' alignItems='center' alignContent='center' justify='center' spacing={2} >\n                        <Grid container item direction='row' justify='center' alignItems='center' wrap='wrap'>\n                            <Grid container item direction='column' justify='center' alignItems='center' sm={3} wrap='wrap'>\n                                <img\n                                    style={{ maxWidth: '100%', marginBottom: '10%' }}\n                                    src={server + '/' + content.processed_image_path}\n                                    alt='X-Ray'\n                                />\n                                {content.report_path === null ?\n                                    <Typography variant='h5'> No report available </Typography> :\n                                    <a href={server + '/' + content.report_path} target=\"_blank\">Report</a>}\n                            </Grid>\n                            <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\n                                <ComposedChart\n                                    style={{ fontSize: 'calc(5px + 2vmin)' }}\n                                    width={1000}\n                                    height={600}\n                                    data={chartData}>\n                                    <XAxis tick={false} dataKey='name' />\n                                    <YAxis interval=\"preserveStartEnd\" domain={[0, 100]} />\n                                    <Tooltip />\n                                    <Legend align='right' layout='vertical' verticalAlign='middle' content={() => (\n                                        <ul>\n                                            {\n                                                chartData.map((entry, i) => (\n                                                    <li key={i} style={{ color: colors[i], listStyleType: 'square' }}>\n                                                        <p style={{ color: \"black\" }}>{entry.name}</p>\n                                                    </li>\n                                                ))\n                                            }\n                                        </ul>\n                                    )} />\n                                    <Bar dataKey='value'>\n                                        {\n                                            chartData.map((entry, i) => (\n                                                <Cell key={`cell-${i}`} fill={colors[i]} stroke={colors[i]} />\n                                            ))\n                                        }\n                                    </Bar>\n                                    {/* <Line dataKey='threshold' /> */}\n                                </ComposedChart>\n                            </Grid>\n                        </Grid>\n                        <Grid container item direction='row' justify='center' alignItems='center' wrap='wrap'>\n                            <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\n                                <Table style={{ border: '2px solid black' }}>\n                                    <TableBody>\n                                        <TableRow>\n                                            <TableCell align='center'></TableCell>\n                                            <TableCell align='center'>Cardiomegaly</TableCell>\n                                            <TableCell align='center'>Edema</TableCell>\n                                            <TableCell align='center'>Consolidation</TableCell>\n                                            <TableCell align='center'>Atelectasis</TableCell>\n                                            <TableCell align='center'>Pleural effusion</TableCell>\n                                            <TableCell align='center'>Active Tuberculosis</TableCell>\n                                            <TableCell align='center'>Healed Tuberculosis</TableCell>\n                                            <TableCell align='center'>Metastasis</TableCell>\n                                            <TableCell align='center'>Mass Lesion</TableCell>\n                                            <TableCell align='center'>Calcification</TableCell>\n                                        </TableRow>\n                                        <TableRow>\n                                            <TableCell>1<sup>st</sup> Level</TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.cardiomegaly === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.edema === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.consolidation === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.atelectasis === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.pleural_effusion === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.active_tuberculosis === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.healed_tuberculosis === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.metastasis === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.mass_lesion === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.calcification === 1} disabled />} />\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow>\n                                            <TableCell>2<sup>nd</sup> Level</TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.cardiomegaly === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.edema === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.consolidation === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.atelectasis === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.pleural_effusion === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.active_tuberculosis === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.healed_tuberculosis === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.metastasis === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.mass_lesion === 1} disabled />} />\n                                            </TableCell>\n                                            <TableCell align='center'>\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.calcification === 1} disabled />} />\n                                            </TableCell>\n                                        </TableRow>\n                                    </TableBody>\n                                </Table>\n                            </Grid>\n                        </Grid>\n                        {this.state.config[0].allow_radiologist_reassess === 'true' ? (this.state.isUpdate ?\n                            <Grid container item direction='row' justify='center' alignItems='center' wrap='wrap'>\n                                <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\n                                    <Table style={{ border: '2px solid black' }}>\n                                        <TableBody>\n                                            <TableRow>\n                                                <TableCell align='center'></TableCell>\n                                                <TableCell align='center'>Cardiomegaly</TableCell>\n                                                <TableCell align='center'>Edema</TableCell>\n                                                <TableCell align='center'>Consolidation</TableCell>\n                                                <TableCell align='center'>Atelectasis</TableCell>\n                                                <TableCell align='center'>Pleural effusion</TableCell>\n                                                <TableCell align='center'>Active Tuberculosis</TableCell>\n                                                <TableCell align='center'>Healed Tuberculosis</TableCell>\n                                                <TableCell align='center'>Metastasis</TableCell>\n                                                <TableCell align='center'>Mass Lesion</TableCell>\n                                                <TableCell align='center'>Calcification</TableCell>\n                                                <TableCell align='center'>None</TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell>Update 2<sup>nd</sup> Level Input</TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControlLabel control={<Checkbox color='primary' name='cardiomegaly' onChange={this.onChange} />} />\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControlLabel control={<Checkbox color='primary' name='edema' onChange={this.onChange} />} />\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControlLabel control={<Checkbox color='primary' name='consolidation' onChange={this.onChange} />} />\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControlLabel control={<Checkbox color='primary' name='atelectasis' onChange={this.onChange} />} />\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControlLabel control={<Checkbox color='primary' name='pleural_effusion' onChange={this.onChange} />} />\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControlLabel control={<Checkbox color='primary' name='active_tuberculosis' onChange={this.onChange} />} />\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControlLabel control={<Checkbox color='primary' name='healed_tuberculosis' onChange={this.onChange} />} />\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControlLabel control={<Checkbox color='primary' name='metastasis' onChange={this.onChange} />} />\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControlLabel control={<Checkbox color='primary' name='mass_lesion' onChange={this.onChange} />} />\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControlLabel control={<Checkbox color='primary' name='calcification' onChange={this.onChange} />} />\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControlLabel control={<Checkbox color='primary' name='none' onChange={this.onChange} />} />\n                                                </TableCell>\n                                            </TableRow>\n                                        </TableBody>\n                                    </Table>\n                                    <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\n                                        <Button onClick={() => this.calculate(content.id)}> Save </Button>\n                                        <Button onClick={() => { this.setState({ isUpdate: false }) }}> Cancel </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid> :\n                            <Grid container item direction='row' justify='center' alignItems='center' wrap='wrap'>\n                                <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\n                                    <Button shape='rounded' variant='outlined' size='large' onClick={() => {\n                                        this.setState({\n                                            isUpdate: true,\n                                        })\n                                    }} >\n                                        Update Input\n                                    </Button>\n                                </Grid>\n                            </Grid>) : null}\n\n                        <Grid container item direction='row' justify='center' alignItems='center' wrap='wrap'>\n                            <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\n                                <Pagination shape='rounded' variant='outlined' size='large' count={data.length} page={page} onChange={(event, value) => {\n                                    this.setState({\n                                        page: value,\n                                    })\n                                }} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div>\n            )\n        }\n    }\n\n    alert = () => (\n        <Snackbar\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            open={this.state.open}\n            onClose={() => this.setState({ open: !this.state.open })}\n            autoHideDuration={2000}\n            message={this.state.message}\n        />\n    )\n\n    onChange = (event) => {\n        this.setState({\n            ...this.state,\n            [event.target.name]: event.target.checked,\n            inputSelection: event.target.checked === true ? this.state.inputSelection + 1 : (this.state.inputSelection === 0 ? 0 : this.state.inputSelection - 1)\n        })\n    }\n\n    feedbackChangeHandler = (e, id) => {\n        const { name, value } = e.target;\n        var index = this.state.data.findIndex(x => x.userFeedback.user_access_details_id === id);\n        var newState = [...this.state.data]\n        newState[index].userFeedback = {\n            ...newState[index].userFeedback,\n            [name]: value\n        }\n        this.setState({\n            data: newState\n        })\n    }\n\n    updateFeedbackHandler = (index, id) => {\n        this.setState({\n            loading: true\n        })\n        fetch(server + '/feedback/' + id, {\n            method: 'PUT',\n            mode: 'cors',\n            body: JSON.stringify({\n                feedback: this.state.data[index].userFeedback\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(response => {\n            console.log(response)\n            if (response.status === 200) {\n                this.setState({\n                    loading: false,\n                    open: true,\n                    message: 'Feedback successfully updated'\n                })\n            } else {\n                this.setState({\n                    loading: false,\n                    open: true,\n                    message: 'Error in updating feedback, try after some time'\n                })\n            }\n        }\n        ).catch(e => {\n            this.setState({\n                loading: false,\n                open: true,\n                message: e\n            })\n        })\n    }\n\n    home = () => {\n        this.props.historyAction(false);\n        this.setState({\n            home: true\n        })\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\n                    <CircularProgress\n                        disableShrink\n                    />\n                </Grid>\n            )\n        } else {\n            if (this.state.home) {\n                return <UploadImage />\n            } else {\n                return this.history();\n            }\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    login: state.login,\n    history: state.history,\n    userName: state.userName,\n    userId: state.userId\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loginAction: status => {\n        dispatch(login(status))\n    },\n    historyAction: status => {\n        dispatch(history(status))\n    },\n    resultAction: status => {\n        dispatch(result(status))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(History));\n","export const threshold = {\n    Cardiomegaly: 46.52,\n    Edema: 67.46,\n    Consolidation: 65.90,\n    Atelectasis: 54.93,\n    Pleural_Effusion: 43.74,\n}","import React, { Component } from 'react';\nimport './UploadImage.css';\nimport History from '../History/History';\nimport { connect } from 'react-redux';\nimport { server } from '../../properties';\nimport { XAxis, YAxis, Legend, Bar, Cell, ComposedChart, Line, ResponsiveContainer, Tooltip } from 'recharts';\nimport {\n    Button,\n    CircularProgress,\n    Snackbar,\n    Typography,\n    Grid,\n    TableBody,\n    TableRow,\n    TableCell,\n    RadioGroup, FormControlLabel, Radio, Table, FormControl, TableContainer, List, Paper, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Checkbox, FormGroup\n} from '@material-ui/core';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { history, result, login, userId, userName } from \"../../redux/action\";\nimport { threshold } from '../../constants/threshold';\nimport { ContactsOutlined, PhotoCamera } from '@material-ui/icons';\nimport { styled } from '@material-ui/styles';\n\nconst Input = styled('input')({\n    display: 'none',\n});\n\nconst styles = theme => ({\n    upload: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: '5%'\n    },\n})\n\nclass UploadImage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedXrayFile: null,\n            selectedReportFile: null,\n            responseData: null,\n            loading: true,\n            xrayPreview: null,\n            xrayFileName: null,\n            reportPreview: null,\n            reportFileName: null,\n            limit: false,\n            invalidFile: null,\n            open: false,\n            alertMessage: '',\n            isFeedbackSet: false,\n            feedback: {\n                cardiomegaly: null,\n                edema: null,\n                consolidation: null,\n                atelectasis: null,\n                pleural_effusion: null\n            },\n            feedbackSubmitted: false,\n            inputSelection: 0,\n        }\n    }\n\n    componentDidMount() {\n        console.log(sessionStorage)\n        if(sessionStorage.getItem('Login') && sessionStorage.getItem('is_radiologist') === '1') {\n            console.log('Inside...')\n            window.location.replace('/#/radiology')\n        } else {\n            this.setState({\n                loading: false\n            })\n        }\n    }\n\n    onChangeHandlerXray = event => {\n        var reader = new FileReader();\n        const file = event.target.files[0];\n        this.setState({\n            selectedXrayFile: null,\n            xrayPreview: null,\n            xrayFileName: null\n        })\n        if (file) {\n            const fileName = event.target.files[0].name;\n            console.log(fileName)\n            const extension = fileName.substring(fileName.lastIndexOf('.') + 1);\n            if (extension === 'dcm' || extension === 'DCM' || extension === 'jpg' || extension === 'JPG' || extension === 'raw' || extension === 'RAW' || extension === 'jpeg' || extension === 'JPEG') {\n                reader.onloadend = () => {\n                    this.setState({\n                        invalidFile: false,\n                        selectedXrayFile: file,\n                        xrayPreview: reader.result,\n                        xrayFileName: fileName\n                    })\n                }\n                reader.readAsDataURL(file)\n            } else {\n                this.setState({\n                    invalidFile: true,\n                    open: true,\n                    alertMessage: 'Please upload valid xray'\n                })\n\n            }\n        }\n        console.log(this.state)\n    }\n\n    onChangeHandlerReport = event => {\n        var reader = new FileReader();\n        const file = event.target.files[0];\n        this.setState({\n            selectedReportFile: null,\n            reportPreview: null,\n            reportFileName: null\n        })\n        if (file) {\n            const fileName = event.target.files[0].name;\n            console.log(fileName)\n            const extension = fileName.substring(fileName.lastIndexOf('.') + 1);\n            if (extension === 'pdf' || extension === 'PDF') {\n                reader.onloadend = () => {\n                    this.setState({\n                        invalidFile: false,\n                        selectedReportFile: file,\n                        reportPreview: reader.result,\n                        reportFileName: fileName\n                    })\n                }\n                reader.readAsDataURL(file)\n            } else {\n                this.setState({\n                    open: true,\n                    alertMessage: 'Please upload valid report',\n                    invalidFile: true\n                })\n            }\n        }\n    }\n\n    calculate = () => {\n        console.log('State: ', this.state)\n        this.setState({\n            loading: true\n        })\n        if (this.state.selectedFile === null) {\n            alert(\"Please select file.\")\n            this.setState({\n                loading: false,\n                open: true,\n                alertMessage: 'Please select file.'\n            })\n        } else {\n            var files = {\n                xray: this.state.selectedXrayFile,\n                report: this.state.selectedReportFile\n            }\n            let data = new FormData();\n            data.append('xray', files.xray)\n            data.append('report', files.report)\n            data.append('cardiomegaly', this.state.cardiomegaly)\n            data.append('edema', this.state.edema)\n            data.append('consolidation', this.state.consolidation)\n            data.append('atelectasis', this.state.atelectasis)\n            data.append('pleural_effusion', this.state.pleural_effusion)\n            data.append('active_tuberculosis', this.state.active_tuberculosis)\n            data.append('healed_tuberculosis', this.state.healed_tuberculosis)\n            data.append('metastasis', this.state.metastasis)\n            data.append('mass_lesion', this.state.mass_lesion)\n            data.append('calcification', this.state.calcification)\n            data.append('none', this.state.none)\n\n            fetch(server + \"/calculate/\" + sessionStorage.getItem('UserId'), {\n                method: 'POST',\n                mode: 'cors',\n                body: data,\n                headers: {\n                    \"Accept\": \"application/form-data\",\n                    \"Access-Control-Allow-Origin\": \"*\",\n                    \"x-access-token\": sessionStorage.getItem('access_token'),\n                    \"x-refresh-token\": sessionStorage.getItem('refresh_token')\n                },\n            }).then(response => {\n                if (response.status === 401) {\n                    sessionStorage.clear();\n                    this.props.loginAction(false);\n                    window.location.replace('/')\n                }\n                return response.json()\n            }).then(responseJson => {\n                if (responseJson.data === null) {\n                    this.setState({\n                        loading: false,\n                        limit: true\n                    })\n                } else {\n                    this.setState({\n                        loading: false,\n                        responseData: responseJson.data,\n                        xrayPreview: null,\n                        selectedXrayFile: null,\n                        xrayFileName: null,\n                        reportPreview: null,\n                        selectedReportFile: null,\n                        reportFileName: null,\n                        open: true,\n                        alertMessage: 'File submitted successfully',\n                        inputSelection: 0,\n                        cardiomegaly: undefined,\n                        edema: undefined,\n                        consolidation: undefined,\n                        atelectasis: undefined,\n                        pleural_effusion: undefined,\n                        active_tuberculosis: undefined,\n                        healed_tuberculosis: undefined,\n                        metastasis: undefined,\n                        mass_lesion: undefined,\n                        calcification: undefined,\n                        none: undefined\n                    })\n                    // this.props.resultAction(true)\n                }\n            })\n                .catch(error => console.log(error))\n        }\n    }\n\n    uploadImage = () => {\n        return (\n            <div style={{ flexGrow: 1, padding: '3%', margin: '3%' }}>\n                <Grid container item direction='row' sm wrap='wrap' alignItems='center' alignContent='center' justify='center' spacing={2} >\n                    <Grid container item sm={3} direction='column' justify='center' alignItems='center' wrap='wrap'>\n                        <Grid container item sm direction='column' justify='center' alignItems='center' wrap='wrap'>\n                            <Typography style={{ padding: '5px 10px' }} variant='h4'>Instructions</Typography>\n                            <Typography style={{ padding: '2px' }}>Sample xray</Typography>\n                            <img\n                                id=\"target\"\n                                src={server + '/sample.jpg'}\n                                style={{ maxWidth: '100%' }}\n                                alt='sample image'\n                            />\n                            <br />\n                            <ul>\n                                <li>Only raw files are valid for xray</li>\n                                <li>Only pdf files are valid for report</li>\n                                <li>Please upload properly cropped and aligned image<br />(Refer to the sample xray)</li>\n                                <li>Please upload only black and white xray image</li>\n                                <li>Only chest xrays are supported</li>\n                            </ul>\n                        </Grid>\n                    </Grid>\n                    <Grid container item sm direction='column' wrap='wrap'>\n                        <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\n\n                            <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\n                                <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\n                                    {/* <Typography style={{ padding: '5px 10px', marginTop: '-10%', marginBottom: '15%' }} variant='h4'>2. Upload</Typography> */}\n                                    <label htmlFor='upload-button-xray'>\n                                        <Input\n                                            color='primary'\n                                            id='upload-button-xray'\n                                            type='file'\n                                            onChange={this.onChangeHandlerXray}\n                                        />\n                                        <Button variant=\"contained\" endIcon={<PhotoCamera />} component='span'>\n                                            Upload Raw File\n                                        </Button>\n                                    </label>\n                                    <img\n                                        id=\"target-xray\"\n                                        src={this.state.xrayPreview}\n                                        style={{ maxWidth: 320, maxHeight: 320 }}\n                                        alt={this.state.xrayFileName}\n                                    />\n                                </Grid>\n                                <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\n                                    {/* <Typography style={{ padding: '5px 10px', marginTop: '-10%', marginBottom: '15%' }} variant='h4'>2. Upload</Typography> */}\n\n                                    <label htmlFor='upload-button-report'>\n                                        <Input\n                                            color='primary'\n                                            id='upload-button-report'\n                                            type='file'\n                                            onChange={this.onChangeHandlerReport}\n                                        />\n                                        <Button variant=\"contained\" endIcon={<PhotoCamera />} component='span'>\n                                            Report\n                                        </Button>\n                                    </label>\n                                    <img\n                                        id=\"target-report\"\n                                        src={this.state.reportPreview}\n                                        style={{ maxWidth: 320, maxHeight: 320 }}\n                                        alt={this.state.reportFileName}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        {/* <Grid container item sm direction='column' wrap='wrap'> */}\n                        <Grid container item direction='row' justify='center' alignItems='baseline' sm wrap='wrap' style={{ marginTop: '5%' }}>\n                            <Grid container item direction='column' justify='flex-start' alignItems='stretch' sm wrap='wrap'>\n                                <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\n                                    <Typography variant='h4' >Please select the condition(s) for the uploaded X-Ray</Typography><br />\n                                </Grid>\n                                <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\n                                    <FormGroup>\n                                        <FormControlLabel control={<Checkbox color='primary' name='cardiomegaly' onChange={this.onChange} />} label=\"Cardiomegaly\" />\n                                        <FormControlLabel control={<Checkbox color='primary' name='edema' onChange={this.onChange} />} label=\"Edema\" />\n                                        <FormControlLabel control={<Checkbox color='primary' name='consolidation' onChange={this.onChange} />} label=\"Consolidation\" />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <FormControlLabel control={<Checkbox color='primary' name='atelectasis' onChange={this.onChange} />} label=\"Atelectasis\" />\n                                        <FormControlLabel control={<Checkbox color='primary' name='pleural_effusion' onChange={this.onChange} />} label=\"Pleural Effusion\" />\n                                        <FormControlLabel control={<Checkbox color='primary' name='active_tuberculosis' onChange={this.onChange} />} label=\"Active Tuberculosis\" />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <FormControlLabel control={<Checkbox color='primary' name='healed_tuberculosis' onChange={this.onChange} />} label=\"Healed Tuberculosis\" />\n                                        <FormControlLabel control={<Checkbox color='primary' name='metastasis' onChange={this.onChange} />} label=\"Metastasis\" />\n                                        <FormControlLabel control={<Checkbox color='primary' name='mass_lesion' onChange={this.onChange} />} label=\"Mass Lesion\" />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <FormControlLabel control={<Checkbox color='primary' name='calcification' onChange={this.onChange} />} label=\"Calcification\" />\n                                        <FormControlLabel control={<Checkbox color='primary' name='none' onChange={this.onChange} />} label=\"None\" />\n                                    </FormGroup>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid container item direction='row' justify='center' alignItems='baseline' sm wrap='wrap'>\n                            <Button\n                                type=\"submit\"\n                                disabled={this.state.invalidFile || this.state.selectedXrayFile === null || this.state.inputSelection === 0}\n                                onClick={this.calculate}\n                                variant='contained'\n                                style={{ marginRight: '5%', marginTop: '7.5%' }}\n                            >\n                                Submit\n                            </Button>\n                            <Button type='reset' onClick={this.goHome} variant='contained'>\n                                Cancel\n                            </Button>\n                        </Grid>\n                    </Grid>\n                    {this.alert()}\n                </Grid>\n            </div>\n        )\n    }\n\n    goHome = () => {\n        window.location.reload();\n        // this.setState({\n        //     selectedFile: null,\n        //     preview: null,\n        //     limit: null\n        // })\n    }\n\n    onChange = (event) => {\n        this.setState({\n            ...this.state,\n            [event.target.name]: event.target.checked,\n            inputSelection: event.target.checked === true ? this.state.inputSelection + 1 : (this.state.inputSelection === 0 ? 0 : this.state.inputSelection - 1)\n        })\n    }\n\n    alert = () => (\n        <Snackbar\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            open={this.state.open}\n            onClose={() => this.setState({ open: !this.state.open })}\n            autoHideDuration={2000}\n            message={this.state.alertMessage}\n        />\n    )\n\n    result = () => {\n        if (this.state.responseData.isError === 'true' && this.state.responseData.message == 'Raising error: unwantedImage') {\n            return (\n                <Dialog\n                    open={this.state.responseData.isError === 'true' && this.state.responseData.message == 'Raising error: unwantedImage'}\n                    onClose={this.goHome}\n                >\n                    <DialogTitle style={{ backgroundColor: '#3F51B5', color: 'white' }}>{\"Invalid Image\"}</DialogTitle>\n                    <DialogContent style={{ marginTop: 20 }}>\n                        <DialogContentText color='black'>\n                            Please upload valid chest x-ray image.\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.goHome}>\n                            OK\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )\n        } else if (this.state.responseData.isError === 'false') {\n            const d = this.state.responseData.result;\n            const data = [\n                {\n                    'name': 'Cardiomegaly',\n                    'value': (d[2] * 100).toFixed(2),\n                    'threshold': threshold.Cardiomegaly,\n                }, {\n                    'name': 'Edema',\n                    'value': (d[3] * 100).toFixed(2),\n                    'threshold': threshold.Edema,\n                }, {\n                    'name': 'Consolidation',\n                    'value': (d[4] * 100).toFixed(2),\n                    'threshold': threshold.Consolidation,\n                }, {\n                    'name': 'Atelectasis',\n                    'value': (d[5] * 100).toFixed(2),\n                    'threshold': threshold.Atelectasis,\n                }, {\n                    'name': 'Pleural Effusion',\n                    'value': (d[6] * 100).toFixed(2),\n                    'threshold': threshold.Pleural_Effusion,\n                }\n            ]\n            const colors = ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921']\n            return (\n                <div style={{ flexGrow: 1, padding: '5%' }}>\n                    <Grid container justify='center' wrap='wrap' spacing={1} direction='column'>\n                        <Grid item sm container wrap='wrap' justify='center' alignItems='center' spacing={1} >\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\n                                <img\n                                    src={server + '/' + d[1].split('.')[0] + '_' + sessionStorage.getItem('UserId') + '.' + d[1].split('.')[1]}\n                                    style={{ maxWidth: '100%' }}\n                                    alt='' />\n                            </Grid>\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\n                                <TableContainer>\n                                    <ResponsiveContainer height={400} minWidth={700}>\n                                        <ComposedChart data={data}>\n                                            <XAxis dataKey='name' />\n                                            <YAxis />\n                                            <Tooltip />\n                                            <Legend\n                                                align='center'\n                                                verticalAlign='bottom'\n                                                content={() => (\n                                                    <List style={{ display: 'flex', flexDirection: \"row\", flexWrap: 'wrap', paddingLeft: '10%' }}>\n                                                        <li style={{ color: 'black', listStyleType: 'square', marginRight: '5%' }}>\n                                                            <Typography variant='caption' style={{ color: \"black\" }}>cut-off line</Typography>\n                                                        </li>\n                                                    </List>\n                                                )} />\n                                            <Bar dataKey='value'>\n                                                {\n                                                    data.map((entry, i) => (\n                                                        <Cell key={`cell-${i}`} fill={colors[i]} stroke={colors[i]} />\n                                                    ))\n                                                }\n                                            </Bar>\n                                            <Line dataKey='threshold' stroke='black' />\n                                        </ComposedChart>\n                                    </ResponsiveContainer>\n                                </TableContainer>\n                            </Grid>\n                        </Grid>\n                        <Grid item sm container wrap='wrap' alignContent='center' alignItems='center' justify='center' spacing={1}>\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\n                                <ul>\n                                    <li>Bar graph of any condition above the cut-off line indicates the positive result of that condition in the supplied xray</li>\n                                    <li>Please submit your analysis of xray conditions through the table below the graph.</li>\n                                    <li>Select Yes/No for all conditions and press 'Submit Feedback' button</li>\n                                    <li>Please refrain from submitting incomplete/wrong feedback</li>\n                                </ul>\n                                <Button\n                                    variant='contained'\n                                    onClick={this.submitFeedback}\n                                    disabled={\n                                        this.state.feedback.cardiomegaly === null ||\n                                        this.state.feedback.edema === null ||\n                                        this.state.feedback.consolidation === null ||\n                                        this.state.feedback.atelectasis === null ||\n                                        this.state.feedback.pleural_effusion === null\n                                    }>\n                                    Submit feedback\n                                </Button>\n                            </Grid>\n                            <Grid container item sm wrap='wrap'>\n                                <TableContainer>\n                                    <Table style={{ border: '2px solid black', minWidth: 650 }}>\n                                        <TableBody>\n                                            <TableRow>\n                                                <TableCell align='center'>Cardiomegaly</TableCell>\n                                                <TableCell align='center'>Edema</TableCell>\n                                                <TableCell align='center'>Consolidation</TableCell>\n                                                <TableCell align='center'>Atelectasis</TableCell>\n                                                <TableCell align='center'>Pleural effusion</TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell align='center'>{(d[2] * 100).toFixed(2) + '%'}</TableCell>\n                                                <TableCell align='center'>{(d[3] * 100).toFixed(2) + '%'}</TableCell>\n                                                <TableCell align='center'>{(d[4] * 100).toFixed(2) + '%'}</TableCell>\n                                                <TableCell align='center'>{(d[5] * 100).toFixed(2) + '%'}</TableCell>\n                                                <TableCell align='center'>{(d[6] * 100).toFixed(2) + '%'}</TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell align='center'>\n                                                    <FormControl>\n                                                        <RadioGroup name='cardiomegaly' onChange={e => this.feedbackChangeHandler(e)}>\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\n                                                        </RadioGroup>\n                                                    </FormControl>\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControl>\n                                                        <RadioGroup name='edema' onChange={e => this.feedbackChangeHandler(e)}>\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\n                                                        </RadioGroup>\n                                                    </FormControl>\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControl>\n                                                        <RadioGroup name='consolidation' onChange={e => this.feedbackChangeHandler(e)}>\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\n                                                        </RadioGroup>\n                                                    </FormControl>\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControl>\n                                                        <RadioGroup name='atelectasis' onChange={e => this.feedbackChangeHandler(e)}>\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\n                                                        </RadioGroup>\n                                                    </FormControl>\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControl>\n                                                        <RadioGroup name='pleural_effusion' onChange={e => this.feedbackChangeHandler(e)}>\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\n                                                        </RadioGroup>\n                                                    </FormControl>\n                                                </TableCell>\n                                            </TableRow>\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div>\n            )\n        } else {\n            this.setState({\n                open: true,\n                alertMessage: 'Error occured, contact system admin'\n            })\n            return this.alert();\n        }\n    }\n\n    feedbackChangeHandler = (e) => {\n        const { name, value } = e.target;\n        this.setState({\n            feedback: {\n                ...this.state.feedback,\n                [name]: value\n            }\n        })\n    }\n\n    submitFeedback = () => {\n        this.props.resultAction(false)\n        this.setState({\n            loading: true\n        })\n        fetch(server + '/feedback/' + this.state.responseData.feedbackResponseId, {\n            method: 'PUT',\n            mode: 'cors',\n            body: JSON.stringify({\n                feedback: this.state.feedback\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(response => {\n            if (response.status === 200) {\n                this.setState({\n                    loading: false,\n                    feedbackSubmitted: true,\n                    selectedFile: null,\n                    responseData: null,\n                    preview: null,\n                    limit: false,\n                    open: true,\n                    alertMessage: 'feedback added successfully'\n                })\n            } else {\n                this.setState({\n                    loading: false,\n                    selectedFile: null,\n                    responseData: null,\n                    preview: null,\n                    limit: false,\n                    open: true,\n                    alertMessage: 'error while submitting feedback'\n                })\n            }\n        })\n    }\n\n    render() {\n        if (!this.props.history.history) {\n            if (this.state.loading) {\n                return (\n                    <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\n                        <CircularProgress\n                            disableShrink\n                        />\n                    </Grid>\n                )\n            } else if (this.props.result.result) {\n                return this.result();\n            } else if (this.state.limit) {\n                return (\n                    <Grid container justify='center' direction='column' alignItems='center' style={{ minHeight: '80vh' }}>\n                        <Typography variant=\"h4\">\n                            You have reached max limit. Please contact admin\n                        </Typography>\n                        <br />\n                        <Button onClick={this.goHome}>\n                            Home\n                        </Button>\n                    </Grid>\n                )\n            } else {\n                return this.uploadImage();\n            }\n        } else {\n            return <History />\n        }\n\n    }\n}\n\nconst mapStateToProps = state => ({\n    userId: state.userId,\n    history: state.history,\n    result: state.result,\n    login: state.login\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loginAction: status => { dispatch(login(status)) },\n    userAction: id => { dispatch(userId(id)) },\n    userNameAction: name => { dispatch(userName(name)) },\n    resultAction: status => {\n        dispatch(result(status))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(UploadImage));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { login, history, result } from '../../redux/action';\nimport { AppBar, Toolbar, Typography, Button } from '@material-ui/core';\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = theme => ({\n    toolbar: theme.mixins.toolbar,\n    drawer: {\n        width: 250\n    }\n})\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n        }\n    }\n\n    // toggleDrawer = (status) => {\n    //     this.setState({\n    //         open: status\n    //     })\n    // }\n\n    header = () => {\n        return (\n            <div>\n                <AppBar position=\"fixed\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n                            Smart X-Ray <sup>BETA</sup>\n                        </Typography>\n                        {/* <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n                        {\n                            this.props.login.login || sessionStorage.getItem('Login')\n                                ? sessionStorage.getItem('UserName') === null\n                                    ? 'Hi, there'+this.props.userName.userName\n                                : 'Hi, there'+sessionStorage.getItem('UserName')\n                                : ''\n                        }\n                    </Typography>\n                    <Button color=\"inherit\" onClick={() => this.props.resultAction(false)}>\n                        {this.props.login.login || sessionStorage.getItem('Login') ? 'Upload' : ''}\n                    </Button> */}\n                        {/*<Button color=\"inherit\" onClick={() => this.props.historyAction(true)}>\n                        {this.props.login.login || sessionStorage.getItem('Login') ? 'History' : ''}\n                    </Button>*/}\n                        {/* {button} */}\n                        {/* <Button color=\"inherit\" onClick={() => {\n                            if (this.props.history.history) {\n                                if (sessionStorage.getItem('is_radiologist') === '1') {\n                                    window.location.replace('/#/radiology')\n                                } else {\n                                    window.location.replace('/')\n                                }\n                            } else {\n                                window.location.replace('/#/history')\n                            }\n                        }}>\n                            {this.props.login.login ? this.props.history.history ? 'Home' : 'History' : ''}\n                        </Button> */}\n                        <Button color=\"inherit\" onClick={this.logout}>\n                            {this.props.login.login || sessionStorage.getItem('Login') ? 'SIGNOUT' : ''}\n                        </Button>\n                    </Toolbar>\n                </AppBar>\n                <Toolbar />\n            </div>\n        )\n    }\n\n    logout = () => {\n        sessionStorage.clear();\n        this.props.loginAction(false);\n        this.props.historyAction(false);\n        window.location.replace('/')\n    }\n\n    render() {\n        return this.header();\n    }\n}\n\nconst mapStateToProps = state => ({\n    login: state.login,\n    history: state.history,\n    userName: state.userName,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loginAction: status => {\n        dispatch(login(status))\n    },\n    historyAction: status => {\n        dispatch(history(status))\n    },\n    resultAction: status => {\n        dispatch(result(status))\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Header));\n","import React, { Component } from 'react';\nimport fs, { stat } from 'fs';\nimport './Radiology.css';\nimport History from '../History/History';\nimport { connect } from 'react-redux';\nimport { server } from '../../properties';\nimport { XAxis, YAxis, Legend, Bar, Cell, ComposedChart, Line, ResponsiveContainer, Tooltip } from 'recharts';\nimport {\n    Button,\n    CircularProgress,\n    Snackbar,\n    Typography,\n    Grid,\n    TableBody,\n    TableRow,\n    TableCell,\n    RadioGroup, FormControlLabel, Radio, Table, FormControl, TableContainer, List, Paper, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Checkbox, FormGroup\n} from '@material-ui/core';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { history, result, login, userId, userName } from \"../../redux/action\";\nimport { threshold } from '../../constants/threshold';\nimport { ContactsOutlined, PhotoCamera } from '@material-ui/icons';\nimport { styled } from '@material-ui/styles';\nimport { Document, Page } from 'react-pdf';\nimport Header from '../Header/Header';\n\nconst Input = styled('input')({\n    display: 'none',\n});\n\nconst styles = theme => ({\n    upload: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: '5%'\n    },\n})\n\nclass Radiology extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            responseData: null,\n            loading: true,\n            open: false,\n            alertMessage: '',\n            inputSelection: 0,\n            pageNumber: null,\n            data: [],\n            index: 0\n        }\n    }\n\n    componentDidMount() {\n        this.props.historyAction(false)\n        fetch(server + \"/userInput\" /* + sessionStorage.getItem('UserId') */, {\n            method: 'GET',\n            mode: 'cors',\n            headers: {\n                \"Accept\": \"application/form-data\",\n                \"Access-Control-Allow-Origin\": \"*\",\n                // \"x-access-token\": sessionStorage.getItem('access_token'),\n                // \"x-refresh-token\": sessionStorage.getItem('refresh_token')\n            },\n        }).then(response => {\n            if (response.status === 401) {\n                sessionStorage.clear();\n                this.props.loginAction(false);\n                window.location.replace('/')\n            }\n            return response.json()\n        })\n            .then(responseJson => {\n                console.log(responseJson)\n                if (responseJson.access_token) {\n                    sessionStorage.setItem('access_token', responseJson.access_token)\n                }\n                sessionStorage.setItem('Login', true)\n                this.setState({\n                    data: responseJson,\n                    loading: false\n                })\n            })\n    }\n\n    calculate = (userAccessId) => {\n        this.setState({\n            loading: true\n        })\n        fetch(server + \"/userInput\", {\n            method: 'PUT',\n            mode: 'cors',\n            body: JSON.stringify({\n                cardiomegaly: this.state.cardiomegaly,\n                edema: this.state.edema,\n                consolidation: this.state.consolidation,\n                atelectasis: this.state.atelectasis,\n                pleural_effusion: this.state.pleural_effusion,\n                active_tuberculosis: this.state.active_tuberculosis,\n                healed_tuberculosis: this.state.healed_tuberculosis,\n                metastasis: this.state.metastasis,\n                mass_lesion: this.state.mass_lesion,\n                calcification: this.state.calcification,\n                none: this.state.none,\n                userAccessId: userAccessId,\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-access-token\": sessionStorage.getItem('access_token'),\n                \"x-refresh-token\": sessionStorage.getItem('refresh_token')\n            },\n        }).then(response => {\n            if (response.status === 401) {\n                sessionStorage.clear();\n                this.props.loginAction(false);\n                window.location.replace('/')\n            }\n            return response.json()\n        })\n            .then(responseJson => {\n                console.log(responseJson)\n                if (responseJson.access_token) {\n                    sessionStorage.setItem('access_token', responseJson.access_token)\n                }\n                if (responseJson.status === 500) {\n                    this.setState({\n                        loading: false,\n                        open: true,\n                        alertMessage: 'Something went wrong, please contact system admin'\n                    })\n                } else {\n                    this.setState({\n                        loading: false,\n                        open: true,\n                        alertMessage: 'Response submitted successfully',\n                        index: this.state.index + 1,\n                        inputSelection: 0,\n                        cardiomegaly: undefined,\n                        edema: undefined,\n                        consolidation: undefined,\n                        atelectasis: undefined,\n                        pleural_effusion: undefined,\n                        active_tuberculosis: undefined,\n                        healed_tuberculosis: undefined,\n                        metastasis: undefined,\n                        mass_lesion: undefined,\n                        calcification: undefined,\n                        none: undefined\n                    })\n                    console.log(this.state)\n                }\n            })\n            .catch(error => console.log(error))\n    }\n\n    radiology = () => {\n        var { data, index } = this.state\n        while (index < data.length) {\n            var x = data[index];\n            var xhr = new XMLHttpRequest();\n            xhr.open('HEAD', server + '/' + x.image_path.split('.')[0] + '.' + x.image_path.split('.')[1], false);\n            xhr.send();\n            if (xhr.status == \"404\") {\n                // console.log('File not exist')\n                index++\n                continue;\n            } else {\n                return (\n                    <div style={{ flexGrow: 1, padding: '3%', margin: '3%' }}>\n                        <Grid container item direction='column' sm wrap='wrap' alignItems='center' alignContent='center' justify='center' spacing={2} >\n                            <Grid container item sm direction='row' justify='center' alignItems='center' wrap='wrap'>\n                                <Grid container item sm direction='column' justify='center' alignItems='center' wrap='wrap'>\n\n                                    <img\n                                        id=\"target\"\n                                        src={server + '/' + x.processed_image_path}\n                                        style={{ maxWidth: '100%' }}\n                                        alt='image'\n                                    />\n                                </Grid>\n                                <Grid container item sm direction='column' justify='center' alignItems='center' wrap='wrap'>\n                                    {x.report_path === null ?\n                                        <Typography variant='h6'> No report available </Typography> :\n                                        <a href={server + '/' + x.report_path} target=\"_blank\">Report</a>}\n                                </Grid>\n                                <Grid container item direction='column' justify='flex-start' alignItems='stretch' sm wrap='wrap'>\n                                    <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\n                                        <Typography variant='h4' >Level 1 Input</Typography><br />\n                                    </Grid>\n                                    <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap' style={{ marginLeft: '5%' }}>\n                                        <FormGroup>\n                                            <FormControlLabel control={<Radio color='primary' name='cardiomegaly' checked={x.cardiomegaly === 1} disabled />} label=\"Cardiomegaly\" />\n                                            <FormControlLabel control={<Radio color='primary' name='edema' checked={x.edema === 1} disabled />} label=\"Edema\" />\n                                            <FormControlLabel control={<Radio color='primary' name='consolidation' checked={x.consolidation === 1} disabled />} label=\"Consolidation\" />\n                                            <FormControlLabel control={<Radio color='primary' name='atelectasis' checked={x.atelectasis === 1} disabled />} label=\"Atelectasis\" />\n                                            <FormControlLabel control={<Radio color='primary' name='pleural_effusion' checked={x.pleural_effusion === 1} disabled />} label=\"Pleural Effusion\" />\n                                            <FormControlLabel control={<Radio color='primary' name='active_tuberculosis' checked={x.active_tuberculosis === 1} disabled />} label=\"Active Tuberculosis\" />\n                                            <FormControlLabel control={<Radio color='primary' name='healed_tuberculosis' checked={x.healed_tuberculosis === 1} disabled />} label=\"Healed Tuberculosis\" />\n                                            <FormControlLabel control={<Radio color='primary' name='metastasis' checked={x.metastasis === 1} disabled />} label=\"Metastasis\" />\n                                            <FormControlLabel control={<Radio color='primary' name='mass_lesion' checked={x.mass_lesion === 1} disabled />} label=\"Mass Lesion\" />\n                                            <FormControlLabel control={<Radio color='primary' name='calcification' checked={x.calcification === 1} disabled />} label=\"Calcification\" />\n                                        </FormGroup>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid container item sm direction='column' wrap='wrap'>\n                                <Grid container item direction='row' justify='center' alignItems='baseline' sm wrap='wrap'>\n                                    <Grid container item direction='column' justify='flex-start' alignItems='stretch' sm wrap='wrap'>\n                                        <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\n                                            <Typography variant='h4' >Please select the condition(s) for the uploaded X-Ray</Typography><br />\n                                        </Grid>\n                                        <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\n                                            <FormGroup>\n                                                <FormControlLabel control={<Checkbox color='primary' name='cardiomegaly' onChange={this.onChange} />} label=\"Cardiomegaly\" />\n                                                <FormControlLabel control={<Checkbox color='primary' name='edema' onChange={this.onChange} />} label=\"Edema\" />\n                                                <FormControlLabel control={<Checkbox color='primary' name='consolidation' onChange={this.onChange} />} label=\"Consolidation\" />\n                                            </FormGroup>\n                                            <FormGroup>\n                                                <FormControlLabel control={<Checkbox color='primary' name='atelectasis' onChange={this.onChange} />} label=\"Atelectasis\" />\n                                                <FormControlLabel control={<Checkbox color='primary' name='pleural_effusion' onChange={this.onChange} />} label=\"Pleural Effusion\" />\n                                                <FormControlLabel control={<Checkbox color='primary' name='active_tuberculosis' onChange={this.onChange} />} label=\"Active Tuberculosis\" />\n                                            </FormGroup>\n                                            <FormGroup>\n                                                <FormControlLabel control={<Checkbox color='primary' name='healed_tuberculosis' onChange={this.onChange} />} label=\"Healed Tuberculosis\" />\n                                                <FormControlLabel control={<Checkbox color='primary' name='metastasis' onChange={this.onChange} />} label=\"Metastasis\" />\n                                                <FormControlLabel control={<Checkbox color='primary' name='mass_lesion' onChange={this.onChange} />} label=\"Mass Lesion\" />\n                                            </FormGroup>\n                                            <FormGroup>\n                                                <FormControlLabel control={<Checkbox color='primary' name='calcification' onChange={this.onChange} />} label=\"Calcification\" />\n                                                <FormControlLabel control={<Checkbox color='primary' name='none' onChange={this.onChange} />} label=\"None\" />\n                                            </FormGroup>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\n                                    <Button\n                                        type=\"submit\"\n                                        disabled={this.state.inputSelection == 0}\n                                        onClick={() => {\n                                            this.calculate(x.id)\n                                            index++\n                                        }}\n                                        variant='contained'\n                                        style={{ marginRight: '2.5%', marginTop: '1%' }}\n                                    >\n                                        Submit\n                                    </Button>\n                                    <Button type='reset' onClick={this.goHome} variant='contained' style={{ marginLeft: '2.5%', marginTop: '1%' }}>\n                                        Cancel\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                            {this.alert()}\n                        </Grid>\n                    </div>\n                )\n            }\n        }\n        return (\n            <div style={{ flexGrow: 1, padding: '3%', margin: '3%' }}>\n                <Grid container item direction='column' sm wrap='wrap' alignItems='center' alignContent='center' justify='center' spacing={2} >\n                    <Typography variant='h3'>\n                        Nothing to show\n                    </Typography>\n                </Grid>\n            </div>\n        )\n    }\n\n    goHome = () => {\n        window.location.reload();\n        // this.setState({\n        //     selectedFile: null,\n        //     preview: null,\n        //     limit: null\n        // })\n    }\n\n    onChange = (event) => {\n        this.setState({\n            ...this.state,\n            [event.target.name]: event.target.checked,\n            inputSelection: event.target.checked === true ? this.state.inputSelection + 1 : (this.state.inputSelection === 0 ? 0 : this.state.inputSelection - 1)\n        })\n    }\n\n    alert = () => (\n        <Snackbar\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            open={this.state.open}\n            onClose={() => this.setState({ open: !this.state.open })}\n            autoHideDuration={2000}\n            message={this.state.alertMessage}\n        />\n    )\n\n    /* result = () => {\n        if (this.state.responseData.isError === 'true' && this.state.responseData.message == 'Raising error: unwantedImage') {\n            return (\n                <Dialog\n                    open={this.state.responseData.isError === 'true' && this.state.responseData.message == 'Raising error: unwantedImage'}\n                    onClose={this.goHome}\n                >\n                    <DialogTitle style={{ backgroundColor: '#3F51B5', color: 'white' }}>{\"Invalid Image\"}</DialogTitle>\n                    <DialogContent style={{ marginTop: 20 }}>\n                        <DialogContentText color='black'>\n                            Please upload valid chest x-ray image.\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.goHome}>\n                            OK\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )\n        } else if (this.state.responseData.isError === 'false') {\n            const d = this.state.responseData.result;\n            const data = [\n                {\n                    'name': 'Cardiomegaly',\n                    'value': (d[2] * 100).toFixed(2),\n                    'threshold': threshold.Cardiomegaly,\n                }, {\n                    'name': 'Edema',\n                    'value': (d[3] * 100).toFixed(2),\n                    'threshold': threshold.Edema,\n                }, {\n                    'name': 'Consolidation',\n                    'value': (d[4] * 100).toFixed(2),\n                    'threshold': threshold.Consolidation,\n                }, {\n                    'name': 'Atelectasis',\n                    'value': (d[5] * 100).toFixed(2),\n                    'threshold': threshold.Atelectasis,\n                }, {\n                    'name': 'Pleural Effusion',\n                    'value': (d[6] * 100).toFixed(2),\n                    'threshold': threshold.Pleural_Effusion,\n                }\n            ]\n            const colors = ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921']\n            return (\n                <div style={{ flexGrow: 1, padding: '5%' }}>\n                    <Grid container justify='center' wrap='wrap' spacing={1} direction='column'>\n                        <Grid item sm container wrap='wrap' justify='center' alignItems='center' spacing={1} >\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\n                                <img\n                                    src={server + '/' + d[1].split('.')[0] + '_' + sessionStorage.getItem('UserId') + '.' + d[1].split('.')[1]}\n                                    style={{ maxWidth: '100%' }}\n                                    alt='' />\n                            </Grid>\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\n                                <TableContainer>\n                                    <ResponsiveContainer height={400} minWidth={700}>\n                                        <ComposedChart data={data}>\n                                            <XAxis dataKey='name' />\n                                            <YAxis />\n                                            <Tooltip />\n                                            <Legend\n                                                align='center'\n                                                verticalAlign='bottom'\n                                                content={() => (\n                                                    <List style={{ display: 'flex', flexDirection: \"row\", flexWrap: 'wrap', paddingLeft: '10%' }}>\n                                                        <li style={{ color: 'black', listStyleType: 'square', marginRight: '5%' }}>\n                                                            <Typography variant='caption' style={{ color: \"black\" }}>cut-off line</Typography>\n                                                        </li>\n                                                    </List>\n                                                )} />\n                                            <Bar dataKey='value'>\n                                                {\n                                                    data.map((entry, i) => (\n                                                        <Cell key={`cell-${i}`} fill={colors[i]} stroke={colors[i]} />\n                                                    ))\n                                                }\n                                            </Bar>\n                                            <Line dataKey='threshold' stroke='black' />\n                                        </ComposedChart>\n                                    </ResponsiveContainer>\n                                </TableContainer>\n                            </Grid>\n                        </Grid>\n                        <Grid item sm container wrap='wrap' alignContent='center' alignItems='center' justify='center' spacing={1}>\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\n                                <ul>\n                                    <li>Bar graph of any condition above the cut-off line indicates the positive result of that condition in the supplied xray</li>\n                                    <li>Please submit your analysis of xray conditions through the table below the graph.</li>\n                                    <li>Select Yes/No for all conditions and press 'Submit Feedback' button</li>\n                                    <li>Please refrain from submitting incomplete/wrong feedback</li>\n                                </ul>\n                                <Button\n                                    variant='contained'\n                                    onClick={this.submitFeedback}\n                                    disabled={\n                                        this.state.feedback.cardiomegaly === null ||\n                                        this.state.feedback.edema === null ||\n                                        this.state.feedback.consolidation === null ||\n                                        this.state.feedback.atelectasis === null ||\n                                        this.state.feedback.pleural_effusion === null\n                                    }>\n                                    Submit feedback\n                                </Button>\n                            </Grid>\n                            <Grid container item sm wrap='wrap'>\n                                <TableContainer>\n                                    <Table style={{ border: '2px solid black', minWidth: 650 }}>\n                                        <TableBody>\n                                            <TableRow>\n                                                <TableCell align='center'>Cardiomegaly</TableCell>\n                                                <TableCell align='center'>Edema</TableCell>\n                                                <TableCell align='center'>Consolidation</TableCell>\n                                                <TableCell align='center'>Atelectasis</TableCell>\n                                                <TableCell align='center'>Pleural effusion</TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell align='center'>{(d[2] * 100).toFixed(2) + '%'}</TableCell>\n                                                <TableCell align='center'>{(d[3] * 100).toFixed(2) + '%'}</TableCell>\n                                                <TableCell align='center'>{(d[4] * 100).toFixed(2) + '%'}</TableCell>\n                                                <TableCell align='center'>{(d[5] * 100).toFixed(2) + '%'}</TableCell>\n                                                <TableCell align='center'>{(d[6] * 100).toFixed(2) + '%'}</TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell align='center'>\n                                                    <FormControl>\n                                                        <RadioGroup name='cardiomegaly' onChange={e => this.feedbackChangeHandler(e)}>\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\n                                                        </RadioGroup>\n                                                    </FormControl>\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControl>\n                                                        <RadioGroup name='edema' onChange={e => this.feedbackChangeHandler(e)}>\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\n                                                        </RadioGroup>\n                                                    </FormControl>\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControl>\n                                                        <RadioGroup name='consolidation' onChange={e => this.feedbackChangeHandler(e)}>\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\n                                                        </RadioGroup>\n                                                    </FormControl>\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControl>\n                                                        <RadioGroup name='atelectasis' onChange={e => this.feedbackChangeHandler(e)}>\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\n                                                        </RadioGroup>\n                                                    </FormControl>\n                                                </TableCell>\n                                                <TableCell align='center'>\n                                                    <FormControl>\n                                                        <RadioGroup name='pleural_effusion' onChange={e => this.feedbackChangeHandler(e)}>\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\n                                                        </RadioGroup>\n                                                    </FormControl>\n                                                </TableCell>\n                                            </TableRow>\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div>\n            )\n        } else {\n            this.setState({\n                open: true,\n                alertMessage: 'Error occured, contact system admin'\n            })\n            return this.alert();\n        }\n    }\n    \n    feedbackChangeHandler = (e) => {\n        const { name, value } = e.target;\n        this.setState({\n            feedback: {\n                ...this.state.feedback,\n                [name]: value\n            }\n        })\n    }\n    \n    submitFeedback = () => {\n        this.props.resultAction(false)\n        this.setState({\n            loading: true\n        })\n        fetch(server + '/feedback/' + this.state.responseData.feedbackResponseId, {\n            method: 'PUT',\n            mode: 'cors',\n            body: JSON.stringify({\n                feedback: this.state.feedback\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(response => {\n            if (response.status === 200) {\n                this.setState({\n                    loading: false,\n                    feedbackSubmitted: true,\n                    selectedFile: null,\n                    responseData: null,\n                    preview: null,\n                    limit: false,\n                    open: true,\n                    alertMessage: 'feedback added successfully'\n                })\n            } else {\n                this.setState({\n                    loading: false,\n                    selectedFile: null,\n                    responseData: null,\n                    preview: null,\n                    limit: false,\n                    open: true,\n                    alertMessage: 'error while submitting feedback'\n                })\n            }\n        })\n    } */\n\n    /* render() {\n        if (!this.props.history.history) {\n            if (this.state.loading) {\n                return (\n                    <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\n                        <CircularProgress\n                            disableShrink\n                        />\n                    </Grid>\n                )\n            } else if (this.props.result.result) {\n                return this.result();\n            } else if (this.state.limit) {\n                return (\n                    <Grid container justify='center' direction='column' alignItems='center' style={{ minHeight: '80vh' }}>\n                        <Typography variant=\"h4\">\n                            You have reached max limit. Please contact admin\n                        </Typography>\n                        <br />\n                        <Button onClick={this.goHome}>\n                            Home\n                        </Button>\n                    </Grid>\n                )\n            } else {\n                return this.radiology();\n            }\n        } else {\n            return <History />\n        }\n    \n    } */\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\n                    <CircularProgress\n                        disableShrink\n                    />\n                </Grid>\n            )\n        } else {\n            return this.radiology();\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    userId: state.userId,\n    history: state.history,\n    result: state.result,\n    login: state.login\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loginAction: status => { dispatch(login(status)) },\n    historyAction: status => {\n        dispatch(history(status))\n    },\n    userAction: id => { dispatch(userId(id)) },\n    userNameAction: name => { dispatch(userName(name)) },\n    resultAction: status => {\n        dispatch(result(status))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Radiology));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { login, userId, userName } from '../../redux/action';\nimport UploadImage from '../UploadImage/UploadImage';\nimport { server } from '../../properties';\nimport { Button, TextField, CircularProgress, Snackbar, Grid, withStyles, Typography, Radio } from '@material-ui/core';\nimport Radiology from '../Radiology/Radiology';\n\nconst styles = theme => ({\n    login: {\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n    }\n})\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n            loading: false,\n            open: false,\n            alertMessage: ''\n        }\n    }\n\n    alert = () => (\n        <Snackbar\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            open={this.state.open}\n            onClose={() => this.setState({ open: !this.state.open })}\n            autoHideDuration={3000}\n            message={this.state.alertMessage}\n        />\n    )\n\n    ckeckInput = (msg) => {\n        if (this.state.username === '' || this.state.password === '') {\n            this.props.loginAction(false)\n            this.setState({ open: true, alertMessage: msg, loading: false })\n        }\n    }\n    onSubmit = () => {\n        this.setState({\n            loading: true\n        })\n        this.ckeckInput('username or password cannot be empty');\n        fetch(server + '/login', {\n            method: \"POST\",\n            mode: \"cors\",\n            body: JSON.stringify({\n                username: this.state.username,\n                password: this.state.password\n            }),\n            headers: {\n                \"Access-Control-Allow-Origin\": \"*\",\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    this.props.loginAction(true)\n                }\n                return response.json()\n            }).then(responseJson => {\n                if (responseJson.data === null) {\n                    this.setState({\n                        loading: false,\n                        open: true,\n                        alertMessage: responseJson.message\n                    })\n                } else {\n                    this.props.userAction(responseJson.data.id)\n                    this.props.userNameAction(responseJson.data.username)\n                    // sessionStorage.setItem('access_token', responseJson.data.access_token)\n                    // sessionStorage.setItem('refresh_token', responseJson.data.refresh_token)\n                    sessionStorage.setItem('Login', this.props.login.login)\n                    sessionStorage.setItem('UserId', responseJson.data.id)\n                    sessionStorage.setItem('UserName', responseJson.data.username)\n                    // sessionStorage.setItem('is_radiologist', responseJson.data.is_radiologist)\n                    this.setState({\n                        loading: false\n                    })\n                }\n            })\n            .catch(e => console.log(e))\n    }\n\n    login = () => {\n        return (\n            <Grid container item direction='column' justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\n                <TextField\n                    margin='normal'\n                    color='primary'\n                    onChange={(i) => { this.setState({ username: i.target.value }) }}\n                    label=\"Username\"\n                    id=\"outlined-size-normal\"\n                    variant=\"outlined\"\n                    fullWidth={false}\n                />\n                <br />\n                <TextField\n                    color='primary'\n                    onChange={(i) => { this.setState({ password: i.target.value }) }}\n                    label=\"Password\"\n                    id=\"outlined-size-normal\"\n                    variant=\"outlined\"\n                    fullWidth={false}\n                    type='password'\n                />\n                <br />\n                <Button onClick={this.onSubmit} color='primary'>\n                    Login\n                </Button>\n                {/* <Typography>Don't have account? Create <a href='/#/signup'>here </a></Typography> */}\n                {this.alert()}\n            </Grid>\n        )\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\n                    <CircularProgress\n                        disableShrink\n                    />\n                </Grid>\n            )\n        } else {\n            if (sessionStorage.getItem('Login')) {\n                return <UploadImage />\n            } else {\n                return this.login()\n            }\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    login: state.login\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loginAction: status => { dispatch(login(status)) },\n    userAction: id => { dispatch(userId(id)) },\n    userNameAction: name => { dispatch(userName(name)) },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Login));\n","import React, { Fragment } from 'react';\nimport './App.css';\nimport Login from './components/Login/Login';\nimport Header from './components/Header/Header';\n\nfunction App() {\n  return (\n      <Fragment>\n          <Header/>\n          <Login/>\n          {/* <footer  style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}><p>A product by Deep Brain Lab</p></footer> */}\n      </Fragment>\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <Header />\n    //   </header>\n    //   <body className=\"App-body\">\n    //     <Login />\n    //   </body>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {USER_NAME, LOGIN, USER_ID, HISTORY, RESULT} from './action';\nimport { combineReducers } from 'redux';\n\nconst initialState = {\n    login: false,\n    loading: false\n}\n\nconst loginReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case LOGIN :\n            return {\n                ...state,\n                login: action.payload\n            }\n        default :\n            return state\n    }\n}\n\nconst userNameReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case USER_NAME :\n            return {\n                ...state,\n                userName: action.payload\n            }\n        default :\n            return state\n    }\n}\n\nconst userIdReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case USER_ID :\n            return {\n                ...state,\n                userId: action.payload\n            }\n        default :\n            return state\n    }\n}\n\nconst historyReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case HISTORY :\n            return {\n                ...state,\n                history: action.payload\n            }\n        default :\n            return state\n    }\n}\n\nconst resultReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case RESULT :\n            return {\n                ...state,\n                result: action.payload\n            }\n        default: return state\n    }\n}\n\nexport const rootReducer = combineReducers({\n    login: loginReducer,\n    userName: userNameReducer,\n    userId: userIdReducer,\n    history: historyReducer,\n    result: resultReducer\n})\n","import { createStore } from 'redux';\nimport { rootReducer } from './reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport const store = createStore(rootReducer, composeWithDevTools())","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { login, userId, userName } from '../../redux/action';\nimport Login from '../Login/Login';\nimport { server } from '../../properties';\nimport { Button, TextField, CircularProgress, Snackbar, Grid, withStyles, Typography, FormGroup, FormControlLabel, Radio, FormControl, RadioGroup, FormLabel, Switch } from '@material-ui/core';\nimport { Navigate } from 'react-router-dom';\nimport { Label } from 'recharts';\n\nconst styles = theme => ({\n    login: {\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n    }\n})\n\nclass Signup extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n            email: '',\n            is_radiologist: false,\n            loading: false,\n            open: false,\n            alertMessage: ''\n        }\n    }\n\n    alert = () => (\n        <Snackbar\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            open={this.state.open}\n            onClose={() => this.setState({ open: !this.state.open })}\n            autoHideDuration={3000}\n            message={this.state.alertMessage}\n        />\n    )\n\n    ckeckInput = (msg) => {\n        if (this.state.username === '' || this.state.password === '' || this.state.email === '') {\n            // this.props.loginAction(false)\n            this.setState({ open: true, alertMessage: msg, loading: false })\n        }\n    }\n    onSubmit = () => {\n        this.setState({\n            loading: true\n        })\n        this.ckeckInput('All fields are mendatory');\n        fetch(server + '/signup', {\n            method: \"POST\",\n            mode: \"cors\",\n            body: JSON.stringify({\n                username: this.state.username,\n                password: this.state.password,\n                email: this.state.email,\n                is_radiologist: this.state.is_radiologist\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(response => {\n                this.setState({\n                    loading: false\n                })\n                return response.json()\n            }).then(responseJson => {\n                this.setState({\n                    open: true,\n                    alertMessage: responseJson.message\n                })\n            })\n            .catch(e => console.log(e))\n    }\n\n    onChange = (event) => {\n        this.setState({\n            ...this.state,\n            [event.target.name]: event.target.checked\n        })\n    }\n\n    signup = () => {\n        return (\n            <form>\n                <Grid container direction='column' justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\n                    <Grid item>\n                        <TextField\n                            margin='normal'\n                            color='primary'\n                            onChange={(i) => { this.setState({ username: i.target.value }) }}\n                            label=\"Username\"\n                            id=\"outlined-size-normal\"\n                            variant=\"outlined\"\n                            fullWidth={false}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            margin='normal'\n                            color='primary'\n                            onChange={(i) => { this.setState({ email: i.target.value }) }}\n                            label=\"Eamil\"\n                            id=\"outlined-size-normal\"\n                            variant=\"outlined\"\n                            fullWidth={false}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            margin='normal'\n                            color='primary'\n                            onChange={(i) => { this.setState({ password: i.target.value }) }}\n                            label=\"Password\"\n                            id=\"outlined-size-normal\"\n                            variant=\"outlined\"\n                            fullWidth={false}\n                            type='password'\n                        />\n                    </Grid>\n                    <Grid item>\n                        <FormControl margin='normal'>\n                            <FormControlLabel control={<Switch color='primary' />}\n                                name='is_radiologist'\n                                defaultValue='false'\n                                onChange={this.onChange}\n                                labelPlacement='start'\n                                label=\"Radiologist\" />\n                        </FormControl>\n                    </Grid>\n                    <Button onClick={this.onSubmit} color='primary'>\n                        Signup\n                    </Button>\n                    <Typography>Already have account? Login <a href='/'>here </a></Typography>\n                    {this.alert()}\n                </Grid>\n            </form>\n        )\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\n                    <CircularProgress\n                        disableShrink\n                    />\n                </Grid>\n            )\n        } else {\n            return this.signup()\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    login: state.login\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loginAction: status => { dispatch(login(status)) },\n    userAction: id => { dispatch(userId(id)) },\n    userNameAction: name => { dispatch(userName(name)) },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Signup));\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store';\nimport { HashRouter as Router, Switch, Route, Link, Routes } from 'react-router-dom';\nimport Radiology from './components/Radiology/Radiology';\nimport Header from './components/Header/Header';\nimport History from './components/History/History';\nimport Signup from './components/Signup/Signup';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Routes>\n                <Route path='/' element={<App />} />\n                <Route path='/radiology' element={<Fragment><Header /> <Radiology /></Fragment>} />\n                <Route path='/history' element={<Fragment><Header /> <History /></Fragment>} />\n                {/* <Route path='/signup' element={<Fragment><Header /> <Signup /></Fragment>} /> */}\n            </Routes>\n        </Router>\n        {/* <App /> */}\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}