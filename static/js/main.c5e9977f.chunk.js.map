{"version":3,"sources":["redux/action.js","properties.js","components/History/History.js","constants/threshold.js","components/UploadImage/UploadImage.js","components/Login/Login.js","components/Header/Header.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","components/Radiology/Radiology.js","index.js"],"names":["login","status","type","payload","history","result","server","History","props","state","data","page","content","length","style","flexGrow","padding","margin","Grid","container","item","direction","sm","wrap","alignItems","alignContent","justify","spacing","Typography","variant","chartData","score","cardiomegaly","toFixed","edema","consolidation","atelectasis","pleural_effusion","colors","maxWidth","marginBottom","src","processed_image_path","alt","report_path","href","target","fontSize","width","height","tick","dataKey","interval","domain","align","layout","verticalAlign","map","entry","i","key","color","listStyleType","name","fill","stroke","Table","border","TableBody","TableRow","TableCell","FormControlLabel","control","Radio","checked","userInput","disabled","active_tuberculosis","healed_tuberculosis","metastasis","mass_lesion","calcification","radiologistInput","Pagination","shape","size","count","onChange","event","value","setState","alert","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","autoHideDuration","message","feedbackChangeHandler","e","id","index","findIndex","x","userFeedback","user_access_details_id","newState","updateFeedbackHandler","loading","fetch","method","mode","body","JSON","stringify","feedback","headers","then","response","console","log","catch","home","historyAction","this","respose","json","responseJson","minHeight","CircularProgress","disableShrink","Component","connect","userId","dispatch","withStyles","theme","offset","mixins","toolbar","root","paper","textAlign","palette","text","secondary","img","display","maxHeight","justifyContent","threshold","Input","styled","UploadImage","onChangeHandlerXray","reader","FileReader","file","files","selectedXrayFile","xrayPreview","xrayFileName","fileName","extension","substring","lastIndexOf","onloadend","invalidFile","readAsDataURL","alertMessage","onChangeHandlerReport","selectedReportFile","reportPreview","reportFileName","calculate","selectedFile","xray","report","FormData","append","none","sessionStorage","getItem","limit","responseData","inputSelection","undefined","error","uploadImage","htmlFor","Button","endIcon","PhotoCamera","component","marginTop","FormGroup","Checkbox","label","onClick","marginRight","goHome","window","location","reload","isError","Dialog","DialogTitle","backgroundColor","DialogContent","DialogContentText","DialogActions","d","split","TableContainer","minWidth","List","flexDirection","flexWrap","paddingLeft","submitFeedback","FormControl","RadioGroup","resultAction","feedbackResponseId","feedbackSubmitted","preview","isFeedbackSet","upload","Login","ckeckInput","msg","username","password","loginAction","onSubmit","userAction","userNameAction","setItem","TextField","fullWidth","Header","header","AppBar","position","Toolbar","logout","clear","userName","drawer","App","Boolean","hostname","match","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","Radiology","userAccessId","radiology","xhr","XMLHttpRequest","image_path","send","marginLeft","pageNumber","ReactDOM","render","path","element","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c5e9977f.chunk.js","sourcesContent":["export const LOGIN = 'LOGIN'\r\nexport const USER_NAME = 'USER_NAME'\r\nexport const USER_ID = 'USER_ID'\r\nexport const HISTORY = 'HISTORY'\r\nexport const RESULT = 'RESULT'\r\n\r\nexport const login = (status) => {\r\n    return{\r\n        type: LOGIN,\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const userName = (userName) => {\r\n    return{\r\n        type: USER_NAME,\r\n        payload: userName\r\n    }\r\n}\r\n\r\nexport const userId = (userId) => {\r\n    return{\r\n        type: USER_ID,\r\n        payload: userId\r\n    }\r\n}\r\n\r\nexport const history = (status) => {\r\n    return {\r\n        type: HISTORY,\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const result = (status) => {\r\n    return {\r\n        type: RESULT,\r\n        payload: status\r\n    }\r\n}\r\n","// export const server = 'http://localhost:8182'\r\nexport const server = 'https://xray1.deepnets.in'\r\n","import React from 'react';\r\nimport { Component } from 'react';\r\nimport './History.css';\r\nimport UploadImage from '../UploadImage/UploadImage';\r\nimport { connect } from 'react-redux';\r\nimport { history } from '../../redux/action';\r\nimport { server } from '../../properties';\r\nimport { XAxis, YAxis, Bar, Legend, Line, ComposedChart, Cell } from 'recharts';\r\nimport {\r\n    Grid,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    withStyles,\r\n    Typography,\r\n    FormControlLabel,\r\n    Radio,\r\n    RadioGroup,\r\n    Table,\r\n    CircularProgress, Snackbar, FormControl, FormGroup\r\n} from '@material-ui/core';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport { Tooltip } from 'recharts';\r\n\r\nconst styles = theme => ({\r\n    offset: theme.mixins.toolbar,\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    img: {\r\n        margin: 'auto',\r\n        display: 'block',\r\n        maxWidth: '400',\r\n        maxHeight: '400',\r\n    },\r\n    item: {\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    }\r\n})\r\n\r\nclass History extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            key: [],\r\n            home: false,\r\n            loading: false,\r\n            open: false,\r\n            message: '',\r\n            page: 1,\r\n            content: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ loading: true })\r\n        fetch(server + '/history', {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then(respose => respose.json())\r\n            .then(responseJson => {\r\n                this.setState({\r\n                    data: responseJson.data,\r\n                    loading: false\r\n                })\r\n            }).catch(e => console.log(e))\r\n    }\r\n\r\n    history = () => {\r\n        var { data, page, content } = this.state;\r\n        if (data.length === 0 && content === null) {\r\n            return (\r\n                <div style={{ flexGrow: 1, padding: '3%', margin: '3%' }}>\r\n                    <Grid container item direction='column' sm wrap='wrap' alignItems='center' alignContent='center' justify='center' spacing={2} >\r\n                        <Typography variant='h3'>\r\n                            No AI data found\r\n                        </Typography>\r\n                    </Grid>\r\n                </div>\r\n            )\r\n        } else {\r\n            content = data[page - 1]\r\n            const chartData = [\r\n                {\r\n                    'name': 'Cardiomegaly',\r\n                    'value': (content.score.cardiomegaly * 100).toFixed(2),\r\n                    'threshold': 46.52,\r\n                }, {\r\n                    'name': 'Edema',\r\n                    'value': (content.score.edema * 100).toFixed(2),\r\n                    'threshold': 71.05,\r\n                }, {\r\n                    'name': 'Consolidation',\r\n                    'value': (content.score.consolidation * 100).toFixed(2),\r\n                    'threshold': 65.9,\r\n                }, {\r\n                    'name': 'Atelectasis',\r\n                    'value': (content.score.atelectasis * 100).toFixed(2),\r\n                    'threshold': 54.93,\r\n                }, {\r\n                    'name': 'Pleural Effusion',\r\n                    'value': (content.score.pleural_effusion * 100).toFixed(2),\r\n                    'threshold': 34.61,\r\n                }\r\n            ]\r\n            const colors = ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921']\r\n            return (\r\n                <div style={{ flexGrow: 1, margin: '1.5%' }}>\r\n                    <Grid container item direction='column' sm wrap='wrap' alignItems='center' alignContent='center' justify='center' spacing={2} >\r\n                        <Grid container item direction='row' justify='center' alignItems='center' wrap='wrap'>\r\n                            <Grid container item direction='column' justify='center' alignItems='center' sm={3} wrap='wrap'>\r\n                                <img\r\n                                    style={{ maxWidth: '100%', marginBottom: '10%' }}\r\n                                    src={server + '/' + content.processed_image_path}\r\n                                    alt='X-Ray'\r\n                                />\r\n                                {content.report_path === null ?\r\n                                    <Typography variant='h5'> No report available </Typography> :\r\n                                    <a href={server + '/' + content.report_path} target=\"_blank\">Report</a>}\r\n                            </Grid>\r\n                            <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                <ComposedChart\r\n                                    style={{ fontSize: 'calc(5px + 2vmin)' }}\r\n                                    width={1000}\r\n                                    height={600}\r\n                                    data={chartData}>\r\n                                    <XAxis tick={false} dataKey='name'/>\r\n                                    <YAxis interval=\"preserveStartEnd\" domain={[0,100]}/>\r\n                                    <Tooltip />\r\n                                    <Legend align='right' layout='vertical' verticalAlign='middle' content={() => (\r\n                                        <ul>\r\n                                            {\r\n                                                chartData.map((entry, i) => (\r\n                                                    <li key={i} style={{ color: colors[i], listStyleType: 'square' }}>\r\n                                                        <p style={{ color: \"black\" }}>{entry.name}</p>\r\n                                                    </li>\r\n                                                ))\r\n                                            }\r\n                                        </ul>\r\n                                    )} />\r\n                                    <Bar dataKey='value'>\r\n                                        {\r\n                                            chartData.map((entry, i) => (\r\n                                                <Cell key={`cell-${i}`} fill={colors[i]} stroke={colors[i]} />\r\n                                            ))\r\n                                        }\r\n                                    </Bar>\r\n                                    {/* <Line dataKey='threshold' /> */}\r\n                                </ComposedChart>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container item direction='row' justify='center' alignItems='center' wrap='wrap'>\r\n                            <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                <Table style={{ border: '2px solid black' }}>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell align='center'></TableCell>\r\n                                            <TableCell align='center'>Cardiomegaly</TableCell>\r\n                                            <TableCell align='center'>Edema</TableCell>\r\n                                            <TableCell align='center'>Consolidation</TableCell>\r\n                                            <TableCell align='center'>Atelectasis</TableCell>\r\n                                            <TableCell align='center'>Pleural effusion</TableCell>\r\n                                            <TableCell align='center'>Active Tuberculosis</TableCell>\r\n                                            <TableCell align='center'>Healed Tuberculosis</TableCell>\r\n                                            <TableCell align='center'>Metastasis</TableCell>\r\n                                            <TableCell align='center'>Mass Lesion</TableCell>\r\n                                            <TableCell align='center'>Calcification</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>1<sup>st</sup> Level</TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.cardiomegaly === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.edema === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.consolidation === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.atelectasis === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.pleural_effusion === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.active_tuberculosis === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.healed_tuberculosis === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.metastasis === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.mass_lesion === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.userInput.calcification === 1} disabled />} />\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>2<sup>nd</sup> Level</TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.cardiomegaly === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.edema === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.consolidation === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.atelectasis === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.pleural_effusion === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.active_tuberculosis === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.healed_tuberculosis === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.metastasis === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.mass_lesion === 1} disabled />} />\r\n                                            </TableCell>\r\n                                            <TableCell align='center'>\r\n                                                <FormControlLabel control={<Radio color='primary' checked={content.radiologistInput.calcification === 1} disabled />} />\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container item direction='row' justify='center' alignItems='center' wrap='wrap'>\r\n                            <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                <Pagination shape='rounded' variant='outlined' size='large' count={data.length} page={page} onChange={(event, value) => {\r\n                                    this.setState({\r\n                                        page: value,\r\n                                        content: data[value - 1]\r\n                                    })\r\n                                }} />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    alert = () => (\r\n        <Snackbar\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            open={this.state.open}\r\n            onClose={() => this.setState({ open: !this.state.open })}\r\n            autoHideDuration={2000}\r\n            message={this.state.message}\r\n        />\r\n    )\r\n\r\n    feedbackChangeHandler = (e, id) => {\r\n        const { name, value } = e.target;\r\n        var index = this.state.data.findIndex(x => x.userFeedback.user_access_details_id === id);\r\n        var newState = [...this.state.data]\r\n        newState[index].userFeedback = {\r\n            ...newState[index].userFeedback,\r\n            [name]: value\r\n        }\r\n        this.setState({\r\n            data: newState\r\n        })\r\n    }\r\n\r\n    updateFeedbackHandler = (index, id) => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        fetch(server + '/feedback/' + id, {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            body: JSON.stringify({\r\n                feedback: this.state.data[index].userFeedback\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => {\r\n            console.log(response)\r\n            if (response.status === 200) {\r\n                this.setState({\r\n                    loading: false,\r\n                    open: true,\r\n                    message: 'Feedback successfully updated'\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    loading: false,\r\n                    open: true,\r\n                    message: 'Error in updating feedback, try after some time'\r\n                })\r\n            }\r\n        }\r\n        ).catch(e => {\r\n            this.setState({\r\n                loading: false,\r\n                open: true,\r\n                message: e\r\n            })\r\n        })\r\n    }\r\n\r\n    home = () => {\r\n        this.props.historyAction(false);\r\n        this.setState({\r\n            home: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (\r\n                <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                    <CircularProgress\r\n                        disableShrink\r\n                    />\r\n                </Grid>\r\n            )\r\n        } else {\r\n            if (this.state.home) {\r\n                return <UploadImage />\r\n            } else {\r\n                return this.history();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    userId: state.userId\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    historyAction: status => {\r\n        dispatch(history(status))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(History));\r\n","export const threshold = {\r\n    Cardiomegaly: 46.52,\r\n    Edema: 67.46,\r\n    Consolidation: 65.90,\r\n    Atelectasis: 54.93,\r\n    Pleural_Effusion: 43.74,\r\n}","import React, { Component } from 'react';\r\nimport './UploadImage.css';\r\nimport History from '../History/History';\r\nimport { connect } from 'react-redux';\r\nimport { server } from '../../properties';\r\nimport { XAxis, YAxis, Legend, Bar, Cell, ComposedChart, Line, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Snackbar,\r\n    Typography,\r\n    Grid,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    RadioGroup, FormControlLabel, Radio, Table, FormControl, TableContainer, List, Paper, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Checkbox, FormGroup\r\n} from '@material-ui/core';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { history, result } from \"../../redux/action\";\r\nimport { threshold } from '../../constants/threshold';\r\nimport { PhotoCamera } from '@material-ui/icons';\r\nimport { styled } from '@material-ui/styles';\r\n\r\nconst Input = styled('input')({\r\n    display: 'none',\r\n});\r\n\r\nconst styles = theme => ({\r\n    upload: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        marginTop: '5%'\r\n    },\r\n})\r\n\r\nclass UploadImage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedXrayFile: null,\r\n            selectedReportFile: null,\r\n            responseData: null,\r\n            loading: false,\r\n            xrayPreview: null,\r\n            xrayFileName: null,\r\n            reportPreview: null,\r\n            reportFileName: null,\r\n            limit: false,\r\n            invalidFile: null,\r\n            open: false,\r\n            alertMessage: '',\r\n            isFeedbackSet: false,\r\n            feedback: {\r\n                cardiomegaly: null,\r\n                edema: null,\r\n                consolidation: null,\r\n                atelectasis: null,\r\n                pleural_effusion: null\r\n            },\r\n            feedbackSubmitted: false,\r\n            inputSelection: 0,\r\n        }\r\n    }\r\n\r\n    onChangeHandlerXray = event => {\r\n        var reader = new FileReader();\r\n        const file = event.target.files[0];\r\n        this.setState({\r\n            selectedXrayFile: null,\r\n            xrayPreview: null,\r\n            xrayFileName: null\r\n        })\r\n        if (file) {\r\n            const fileName = event.target.files[0].name;\r\n            console.log(fileName)\r\n            const extension = fileName.substring(fileName.lastIndexOf('.') + 1);\r\n            if (extension === 'dcm' || extension === 'DCM' || extension === 'jpg' || extension === 'JPG' || extension === 'raw' || extension === 'RAW' || extension === 'jpeg' || extension === 'JPEG') {\r\n                reader.onloadend = () => {\r\n                    this.setState({\r\n                        invalidFile: false,\r\n                        selectedXrayFile: file,\r\n                        xrayPreview: reader.result,\r\n                        xrayFileName: fileName\r\n                    })\r\n                }\r\n                reader.readAsDataURL(file)\r\n            } else {\r\n                this.setState({\r\n                    invalidFile: true,\r\n                    open: true,\r\n                    alertMessage: 'Please upload valid xray'\r\n                })\r\n\r\n            }\r\n        }\r\n        console.log(this.state)\r\n    }\r\n\r\n    onChangeHandlerReport = event => {\r\n        var reader = new FileReader();\r\n        const file = event.target.files[0];\r\n        this.setState({\r\n            selectedReportFile: null,\r\n            reportPreview: null,\r\n            reportFileName: null\r\n        })\r\n        if (file) {\r\n            const fileName = event.target.files[0].name;\r\n            console.log(fileName)\r\n            const extension = fileName.substring(fileName.lastIndexOf('.') + 1);\r\n            if (extension === 'pdf' || extension === 'PDF') {\r\n                reader.onloadend = () => {\r\n                    this.setState({\r\n                        invalidFile: false,\r\n                        selectedReportFile: file,\r\n                        reportPreview: reader.result,\r\n                        reportFileName: fileName\r\n                    })\r\n                }\r\n                reader.readAsDataURL(file)\r\n            } else {\r\n                this.setState({\r\n                    open: true,\r\n                    alertMessage: 'Please upload valid report',\r\n                    invalidFile: true\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    calculate = () => {\r\n        console.log('State: ', this.state)\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        if (this.state.selectedFile === null) {\r\n            alert(\"Please select file.\")\r\n            this.setState({\r\n                loading: false,\r\n                open: true,\r\n                alertMessage: 'Please select file.'\r\n            })\r\n        } else {\r\n            var files = {\r\n                xray: this.state.selectedXrayFile,\r\n                report: this.state.selectedReportFile\r\n            }\r\n            let data = new FormData();\r\n            data.append('xray', files.xray)\r\n            data.append('report', files.report)\r\n            data.append('cardiomegaly', this.state.cardiomegaly)\r\n            data.append('edema', this.state.edema)\r\n            data.append('consolidation', this.state.consolidation)\r\n            data.append('atelectasis', this.state.atelectasis)\r\n            data.append('pleural_effusion', this.state.pleural_effusion)\r\n            data.append('active_tuberculosis', this.state.active_tuberculosis)\r\n            data.append('healed_tuberculosis', this.state.healed_tuberculosis)\r\n            data.append('metastasis', this.state.metastasis)\r\n            data.append('mass_lesion', this.state.mass_lesion)\r\n            data.append('calcification', this.state.calcification)\r\n            data.append('none', this.state.none)\r\n\r\n            fetch(server + \"/calculate/\" + sessionStorage.getItem('UserId'), {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                body: data,\r\n                headers: {\r\n                    \"Accept\": \"application/form-data\",\r\n                    \"Access-Control-Allow-Origin\": \"*\"\r\n                },\r\n            }).then(response => response.json())\r\n                .then(responseJson => {\r\n                    if (responseJson.data === null) {\r\n                        this.setState({\r\n                            loading: false,\r\n                            limit: true\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            loading: false,\r\n                            responseData: responseJson.data,\r\n                            xrayPreview: null,\r\n                            selectedXrayFile: null,\r\n                            xrayFileName: null,\r\n                            reportPreview: null,\r\n                            selectedReportFile: null,\r\n                            reportFileName: null,\r\n                            open: true,\r\n                            alertMessage: 'File submitted successfully',\r\n                            inputSelection: 0,\r\n                            cardiomegaly: undefined,\r\n                            edema: undefined,\r\n                            consolidation: undefined,\r\n                            atelectasis: undefined,\r\n                            pleural_effusion: undefined,\r\n                            active_tuberculosis: undefined,\r\n                            healed_tuberculosis: undefined,\r\n                            metastasis: undefined,\r\n                            mass_lesion: undefined,\r\n                            calcification: undefined,\r\n                            none: undefined\r\n                        })\r\n                        // this.props.resultAction(true)\r\n                    }\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    }\r\n\r\n    uploadImage = () => {\r\n        return (\r\n            <div style={{ flexGrow: 1, padding: '3%', margin: '3%' }}>\r\n                <Grid container item direction='row' sm wrap='wrap' alignItems='center' alignContent='center' justify='center' spacing={2} >\r\n                    <Grid container item sm={3} direction='column' justify='center' alignItems='center' wrap='wrap'>\r\n                        <Grid container item sm direction='column' justify='center' alignItems='center' wrap='wrap'>\r\n                            <Typography style={{ padding: '5px 10px' }} variant='h4'>Instructions</Typography>\r\n                            <Typography style={{ padding: '2px' }}>Sample xray</Typography>\r\n                            <img\r\n                                id=\"target\"\r\n                                src={server + '/sample.jpg'}\r\n                                style={{ maxWidth: '100%' }}\r\n                                alt='sample image'\r\n                            />\r\n                            <br />\r\n                            <ul>\r\n                                <li>Only raw files are valid for xray</li>\r\n                                <li>Only pdf files are valid for report</li>\r\n                                <li>Please upload properly cropped and aligned image<br />(Refer to the sample xray)</li>\r\n                                <li>Please upload only black and white xray image</li>\r\n                                <li>Only chest xrays are supported</li>\r\n                            </ul>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container item sm direction='column' wrap='wrap'>\r\n                        <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\r\n\r\n                            <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                    {/* <Typography style={{ padding: '5px 10px', marginTop: '-10%', marginBottom: '15%' }} variant='h4'>2. Upload</Typography> */}\r\n                                    <label htmlFor='upload-button-xray'>\r\n                                        <Input\r\n                                            color='primary'\r\n                                            id='upload-button-xray'\r\n                                            type='file'\r\n                                            onChange={this.onChangeHandlerXray}\r\n                                        />\r\n                                        <Button variant=\"contained\" endIcon={<PhotoCamera />} component='span'>\r\n                                            Upload Raw File\r\n                                        </Button>\r\n                                    </label>\r\n                                    <img\r\n                                        id=\"target-xray\"\r\n                                        src={this.state.xrayPreview}\r\n                                        style={{ maxWidth: 320, maxHeight: 320 }}\r\n                                        alt={this.state.xrayFileName}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid container item direction='column' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                    {/* <Typography style={{ padding: '5px 10px', marginTop: '-10%', marginBottom: '15%' }} variant='h4'>2. Upload</Typography> */}\r\n\r\n                                    <label htmlFor='upload-button-report'>\r\n                                        <Input\r\n                                            color='primary'\r\n                                            id='upload-button-report'\r\n                                            type='file'\r\n                                            onChange={this.onChangeHandlerReport}\r\n                                        />\r\n                                        <Button variant=\"contained\" endIcon={<PhotoCamera />} component='span'>\r\n                                            Report\r\n                                        </Button>\r\n                                    </label>\r\n                                    <img\r\n                                        id=\"target-report\"\r\n                                        src={this.state.reportPreview}\r\n                                        style={{ maxWidth: 320, maxHeight: 320 }}\r\n                                        alt={this.state.reportFileName}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {/* <Grid container item sm direction='column' wrap='wrap'> */}\r\n                        <Grid container item direction='row' justify='center' alignItems='baseline' sm wrap='wrap' style={{ marginTop: '5%' }}>\r\n                            <Grid container item direction='column' justify='flex-start' alignItems='stretch' sm wrap='wrap'>\r\n                                <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                    <Typography variant='h4' >Please select the condition(s) for the uploaded X-Ray</Typography><br />\r\n                                </Grid>\r\n                                <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                    <FormGroup>\r\n                                        <FormControlLabel control={<Checkbox color='primary' name='cardiomegaly' onChange={this.onChange} />} label=\"Cardiomegaly\" />\r\n                                        <FormControlLabel control={<Checkbox color='primary' name='edema' onChange={this.onChange} />} label=\"Edema\" />\r\n                                        <FormControlLabel control={<Checkbox color='primary' name='consolidation' onChange={this.onChange} />} label=\"Consolidation\" />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <FormControlLabel control={<Checkbox color='primary' name='atelectasis' onChange={this.onChange} />} label=\"Atelectasis\" />\r\n                                        <FormControlLabel control={<Checkbox color='primary' name='pleural_effusion' onChange={this.onChange} />} label=\"Pleural Effusion\" />\r\n                                        <FormControlLabel control={<Checkbox color='primary' name='active_tuberculosis' onChange={this.onChange} />} label=\"Active Tuberculosis\" />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <FormControlLabel control={<Checkbox color='primary' name='healed_tuberculosis' onChange={this.onChange} />} label=\"Healed Tuberculosis\" />\r\n                                        <FormControlLabel control={<Checkbox color='primary' name='metastasis' onChange={this.onChange} />} label=\"Metastasis\" />\r\n                                        <FormControlLabel control={<Checkbox color='primary' name='mass_lesion' onChange={this.onChange} />} label=\"Mass Lesion\" />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <FormControlLabel control={<Checkbox color='primary' name='calcification' onChange={this.onChange} />} label=\"Calcification\" />\r\n                                        <FormControlLabel control={<Checkbox color='primary' name='none' onChange={this.onChange} />} label=\"None\" />\r\n                                    </FormGroup>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container item direction='row' justify='center' alignItems='baseline' sm wrap='wrap'>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                disabled={this.state.invalidFile || this.state.selectedXrayFile === null || this.state.inputSelection === 0}\r\n                                onClick={this.calculate}\r\n                                variant='contained'\r\n                                style={{ marginRight: '5%', marginTop: '7.5%' }}\r\n                            >\r\n                                Submit\r\n                            </Button>\r\n                            <Button type='reset' onClick={this.goHome} variant='contained'>\r\n                                Cancel\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    {this.alert()}\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    goHome = () => {\r\n        window.location.reload();\r\n        // this.setState({\r\n        //     selectedFile: null,\r\n        //     preview: null,\r\n        //     limit: null\r\n        // })\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            [event.target.name]: event.target.checked,\r\n            inputSelection: event.target.checked === true ? this.state.inputSelection + 1 : (this.state.inputSelection === 0 ? 0 : this.state.inputSelection - 1)\r\n        })\r\n    }\r\n\r\n    alert = () => (\r\n        <Snackbar\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            open={this.state.open}\r\n            onClose={() => this.setState({ open: !this.state.open })}\r\n            autoHideDuration={2000}\r\n            message={this.state.alertMessage}\r\n        />\r\n    )\r\n\r\n    result = () => {\r\n        if (this.state.responseData.isError === 'true' && this.state.responseData.message == 'Raising error: unwantedImage') {\r\n            return (\r\n                <Dialog\r\n                    open={this.state.responseData.isError === 'true' && this.state.responseData.message == 'Raising error: unwantedImage'}\r\n                    onClose={this.goHome}\r\n                >\r\n                    <DialogTitle style={{ backgroundColor: '#3F51B5', color: 'white' }}>{\"Invalid Image\"}</DialogTitle>\r\n                    <DialogContent style={{ marginTop: 20 }}>\r\n                        <DialogContentText color='black'>\r\n                            Please upload valid chest x-ray image.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.goHome}>\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            )\r\n        } else if (this.state.responseData.isError === 'false') {\r\n            const d = this.state.responseData.result;\r\n            const data = [\r\n                {\r\n                    'name': 'Cardiomegaly',\r\n                    'value': (d[2] * 100).toFixed(2),\r\n                    'threshold': threshold.Cardiomegaly,\r\n                }, {\r\n                    'name': 'Edema',\r\n                    'value': (d[3] * 100).toFixed(2),\r\n                    'threshold': threshold.Edema,\r\n                }, {\r\n                    'name': 'Consolidation',\r\n                    'value': (d[4] * 100).toFixed(2),\r\n                    'threshold': threshold.Consolidation,\r\n                }, {\r\n                    'name': 'Atelectasis',\r\n                    'value': (d[5] * 100).toFixed(2),\r\n                    'threshold': threshold.Atelectasis,\r\n                }, {\r\n                    'name': 'Pleural Effusion',\r\n                    'value': (d[6] * 100).toFixed(2),\r\n                    'threshold': threshold.Pleural_Effusion,\r\n                }\r\n            ]\r\n            const colors = ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921']\r\n            return (\r\n                <div style={{ flexGrow: 1, padding: '5%' }}>\r\n                    <Grid container justify='center' wrap='wrap' spacing={1} direction='column'>\r\n                        <Grid item sm container wrap='wrap' justify='center' alignItems='center' spacing={1} >\r\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\r\n                                <img\r\n                                    src={server + '/' + d[1].split('.')[0] + '_' + sessionStorage.getItem('UserId') + '.' + d[1].split('.')[1]}\r\n                                    style={{ maxWidth: '100%' }}\r\n                                    alt='' />\r\n                            </Grid>\r\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\r\n                                <TableContainer>\r\n                                    <ResponsiveContainer height={400} minWidth={700}>\r\n                                        <ComposedChart data={data}>\r\n                                            <XAxis dataKey='name' />\r\n                                            <YAxis />\r\n                                            <Tooltip />\r\n                                            <Legend\r\n                                                align='center'\r\n                                                verticalAlign='bottom'\r\n                                                content={() => (\r\n                                                    <List style={{ display: 'flex', flexDirection: \"row\", flexWrap: 'wrap', paddingLeft: '10%' }}>\r\n                                                        <li style={{ color: 'black', listStyleType: 'square', marginRight: '5%' }}>\r\n                                                            <Typography variant='caption' style={{ color: \"black\" }}>cut-off line</Typography>\r\n                                                        </li>\r\n                                                    </List>\r\n                                                )} />\r\n                                            <Bar dataKey='value'>\r\n                                                {\r\n                                                    data.map((entry, i) => (\r\n                                                        <Cell key={`cell-${i}`} fill={colors[i]} stroke={colors[i]} />\r\n                                                    ))\r\n                                                }\r\n                                            </Bar>\r\n                                            <Line dataKey='threshold' stroke='black' />\r\n                                        </ComposedChart>\r\n                                    </ResponsiveContainer>\r\n                                </TableContainer>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item sm container wrap='wrap' alignContent='center' alignItems='center' justify='center' spacing={1}>\r\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\r\n                                <ul>\r\n                                    <li>Bar graph of any condition above the cut-off line indicates the positive result of that condition in the supplied xray</li>\r\n                                    <li>Please submit your analysis of xray conditions through the table below the graph.</li>\r\n                                    <li>Select Yes/No for all conditions and press 'Submit Feedback' button</li>\r\n                                    <li>Please refrain from submitting incomplete/wrong feedback</li>\r\n                                </ul>\r\n                                <Button\r\n                                    variant='contained'\r\n                                    onClick={this.submitFeedback}\r\n                                    disabled={\r\n                                        this.state.feedback.cardiomegaly === null ||\r\n                                        this.state.feedback.edema === null ||\r\n                                        this.state.feedback.consolidation === null ||\r\n                                        this.state.feedback.atelectasis === null ||\r\n                                        this.state.feedback.pleural_effusion === null\r\n                                    }>\r\n                                    Submit feedback\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid container item sm wrap='wrap'>\r\n                                <TableContainer>\r\n                                    <Table style={{ border: '2px solid black', minWidth: 650 }}>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell align='center'>Cardiomegaly</TableCell>\r\n                                                <TableCell align='center'>Edema</TableCell>\r\n                                                <TableCell align='center'>Consolidation</TableCell>\r\n                                                <TableCell align='center'>Atelectasis</TableCell>\r\n                                                <TableCell align='center'>Pleural effusion</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell align='center'>{(d[2] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[3] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[4] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[5] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[6] * 100).toFixed(2) + '%'}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='cardiomegaly' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='edema' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='consolidation' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='atelectasis' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='pleural_effusion' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            )\r\n        } else {\r\n            this.setState({\r\n                open: true,\r\n                alertMessage: 'Error occured, contact system admin'\r\n            })\r\n            return this.alert();\r\n        }\r\n    }\r\n\r\n    feedbackChangeHandler = (e) => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            feedback: {\r\n                ...this.state.feedback,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    submitFeedback = () => {\r\n        this.props.resultAction(false)\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        fetch(server + '/feedback/' + this.state.responseData.feedbackResponseId, {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            body: JSON.stringify({\r\n                feedback: this.state.feedback\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                this.setState({\r\n                    loading: false,\r\n                    feedbackSubmitted: true,\r\n                    selectedFile: null,\r\n                    responseData: null,\r\n                    preview: null,\r\n                    limit: false,\r\n                    open: true,\r\n                    alertMessage: 'feedback added successfully'\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    loading: false,\r\n                    selectedFile: null,\r\n                    responseData: null,\r\n                    preview: null,\r\n                    limit: false,\r\n                    open: true,\r\n                    alertMessage: 'error while submitting feedback'\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.history.history) {\r\n            if (this.state.loading) {\r\n                return (\r\n                    <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                        <CircularProgress\r\n                            disableShrink\r\n                        />\r\n                    </Grid>\r\n                )\r\n            } else if (this.props.result.result) {\r\n                return this.result();\r\n            } else if (this.state.limit) {\r\n                return (\r\n                    <Grid container justify='center' direction='column' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                        <Typography variant=\"h4\">\r\n                            You have reached max limit. Please contact admin\r\n                        </Typography>\r\n                        <br />\r\n                        <Button onClick={this.goHome}>\r\n                            Home\r\n                        </Button>\r\n                    </Grid>\r\n                )\r\n            } else {\r\n                return this.uploadImage();\r\n            }\r\n        } else {\r\n            return <History />\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    userId: state.userId,\r\n    history: state.history,\r\n    result: state.result\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    resultAction: status => {\r\n        dispatch(result(status))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(UploadImage));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { login, userId, userName } from '../../redux/action';\r\nimport UploadImage from '../UploadImage/UploadImage';\r\nimport { server } from '../../properties';\r\nimport { Button, TextField, CircularProgress, Snackbar, Grid, withStyles } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    login: {\r\n        alignContent:'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    }\r\n})\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            loading: false,\r\n            open: false,\r\n            alertMessage: ''\r\n        }\r\n    }\r\n\r\n    alert = () => (\r\n        <Snackbar\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            open={this.state.open}\r\n            onClose={() => this.setState({ open: !this.state.open })}\r\n            autoHideDuration={3000}\r\n            message={this.state.alertMessage}\r\n        />\r\n    )\r\n\r\n    ckeckInput = (msg) => {\r\n        if(this.state.username === '' || this.state.password === ''){\r\n            this.props.loginAction(false)\r\n            this.setState({ open: true, alertMessage: msg, loading: false })\r\n        }\r\n    }\r\n    onSubmit = () => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        this.ckeckInput('username or password cannot be empty');\r\n        fetch(server + '/login', {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            body: JSON.stringify({\r\n                username: this.state.username,\r\n                password: this.state.password\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(response => {\r\n            if(response.status === 200) {\r\n                this.props.loginAction(true)\r\n            }\r\n            return response.json()\r\n        }).then(responseJson => {\r\n            if(responseJson.data === null) {\r\n                this.setState({\r\n                    loading: false,\r\n                    open: true,\r\n                    alertMessage: responseJson.message\r\n                })\r\n            }else {\r\n                this.props.userAction(responseJson.data.id)\r\n                this.props.userNameAction(responseJson.data.username)\r\n                sessionStorage.setItem('Login', this.props.login.login)\r\n                sessionStorage.setItem('UserId', responseJson.data.id)\r\n                sessionStorage.setItem('UserName', responseJson.data.username)\r\n                this.setState({\r\n                    loading: false\r\n                })\r\n            }\r\n        })\r\n        .catch( e => console.log(e) )\r\n    }\r\n\r\n    login = () => {\r\n        return (\r\n            <Grid container item direction='column' justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                    <TextField\r\n                        margin='normal'\r\n                        color='primary'\r\n                        onChange={(i) => {this.setState({username: i.target.value})}}\r\n                        label=\"Username\"\r\n                        id=\"outlined-size-normal\"\r\n                        variant=\"outlined\"\r\n                        fullWidth={false}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                        color='primary'\r\n                        onChange={(i) => {this.setState({password: i.target.value})}}\r\n                        label=\"Password\"\r\n                        id=\"outlined-size-normal\"\r\n                        variant=\"outlined\"\r\n                        fullWidth={false}\r\n                        type='password'\r\n                    />\r\n                    <br/>\r\n                    <Button onClick={this.onSubmit} color='primary'>\r\n                        Login\r\n                    </Button>\r\n                    {this.alert()}\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading) {\r\n            return (\r\n                <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                    <CircularProgress\r\n                        disableShrink\r\n                    />\r\n                </Grid>\r\n            )\r\n        } else {\r\n            if(sessionStorage.getItem('Login')) {\r\n                return <UploadImage />\r\n            } else {\r\n                return this.login()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    login: state.login\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loginAction: status => {dispatch(login(status))},\r\n    userAction: id => {dispatch(userId(id))},\r\n    userNameAction: name => {dispatch(userName(name))},\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (withStyles(styles)(Login));\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {login, history, result} from '../../redux/action';\r\nimport {AppBar, Toolbar, Typography, Button } from '@material-ui/core';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme => ({\r\n    toolbar: theme.mixins.toolbar,\r\n    drawer: {\r\n        width: 250\r\n    }\r\n})\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n        }\r\n    }\r\n\r\n    // toggleDrawer = (status) => {\r\n    //     this.setState({\r\n    //         open: status\r\n    //     })\r\n    // }\r\n\r\n    header = () => {\r\n        return (\r\n            <div>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\r\n                        Smart X-Ray <sup>BETA</sup>\r\n                    </Typography>\r\n                    {/* <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\r\n                        {\r\n                            this.props.login.login || sessionStorage.getItem('Login')\r\n                                ? sessionStorage.getItem('UserName') === null\r\n                                    ? 'Hi, there'+this.props.userName.userName\r\n                                : 'Hi, there'+sessionStorage.getItem('UserName')\r\n                                : ''\r\n                        }\r\n                    </Typography>\r\n                    <Button color=\"inherit\" onClick={() => this.props.resultAction(false)}>\r\n                        {this.props.login.login || sessionStorage.getItem('Login') ? 'Upload' : ''}\r\n                    </Button> */}\r\n                    {/*<Button color=\"inherit\" onClick={() => this.props.historyAction(true)}>\r\n                        {this.props.login.login || sessionStorage.getItem('Login') ? 'History' : ''}\r\n                    </Button>*/}\r\n                    <Button color=\"inherit\" onClick={this.logout}>\r\n                        {this.props.login.login || sessionStorage.getItem('Login') ? 'SIGNOUT' : ''}\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    logout = () => {\r\n        sessionStorage.clear();\r\n        this.props.loginAction(false);\r\n        this.props.historyAction(false);\r\n    }\r\n\r\n    render() {\r\n        return this.header();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    login: state.login,\r\n    history: state.history,\r\n    userName: state.userName,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loginAction: status => {\r\n        dispatch(login(status))\r\n    },\r\n    historyAction: status => {\r\n        dispatch(history(status))\r\n    },\r\n    resultAction: status => {\r\n        dispatch(result(status))\r\n    }\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Header));\r\n","import React, { Fragment } from 'react';\r\nimport './App.css';\r\nimport Login from './components/Login/Login';\r\nimport Header from './components/Header/Header';\r\n\r\nfunction App() {\r\n  return (\r\n      <Fragment>\r\n          <Header/>\r\n          <Login/>\r\n          {/* <footer  style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}><p>A product by Deep Brain Lab</p></footer> */}\r\n      </Fragment>\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     <Header />\r\n    //   </header>\r\n    //   <body className=\"App-body\">\r\n    //     <Login />\r\n    //   </body>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {USER_NAME, LOGIN, USER_ID, HISTORY, RESULT} from './action';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst initialState = {\r\n    login: false,\r\n    loading: false\r\n}\r\n\r\nconst loginReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LOGIN :\r\n            return {\r\n                ...state,\r\n                login: action.payload\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nconst userNameReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case USER_NAME :\r\n            return {\r\n                ...state,\r\n                userName: action.payload\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nconst userIdReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case USER_ID :\r\n            return {\r\n                ...state,\r\n                userId: action.payload\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nconst historyReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case HISTORY :\r\n            return {\r\n                ...state,\r\n                history: action.payload\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nconst resultReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case RESULT :\r\n            return {\r\n                ...state,\r\n                result: action.payload\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    userName: userNameReducer,\r\n    userId: userIdReducer,\r\n    history: historyReducer,\r\n    result: resultReducer\r\n})\r\n","import { createStore } from 'redux';\r\nimport { rootReducer } from './reducer';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools())","import React, { Component } from 'react';\r\nimport fs, { stat } from 'fs';\r\nimport './Radiology.css';\r\nimport History from '../History/History';\r\nimport { connect } from 'react-redux';\r\nimport { server } from '../../properties';\r\nimport { XAxis, YAxis, Legend, Bar, Cell, ComposedChart, Line, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Snackbar,\r\n    Typography,\r\n    Grid,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    RadioGroup, FormControlLabel, Radio, Table, FormControl, TableContainer, List, Paper, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Checkbox, FormGroup\r\n} from '@material-ui/core';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { history, result } from \"../../redux/action\";\r\nimport { threshold } from '../../constants/threshold';\r\nimport { ContactsOutlined, PhotoCamera } from '@material-ui/icons';\r\nimport { styled } from '@material-ui/styles';\r\nimport { Document, Page } from 'react-pdf';\r\nimport Header from '../Header/Header';\r\n\r\nconst Input = styled('input')({\r\n    display: 'none',\r\n});\r\n\r\nconst styles = theme => ({\r\n    upload: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        marginTop: '5%'\r\n    },\r\n})\r\n\r\nclass Radiology extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            responseData: null,\r\n            loading: true,\r\n            open: false,\r\n            alertMessage: '',\r\n            inputSelection: 0,\r\n            pageNumber: null,\r\n            data: [],\r\n            index: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(server + \"/userInput\", {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n        }).then(response => response.json())\r\n            .then(responseJson => {\r\n                console.log(responseJson)\r\n                sessionStorage.setItem('Login', true)\r\n                this.setState({\r\n                    data: responseJson,\r\n                    loading: false\r\n                })\r\n            })\r\n    }\r\n\r\n    calculate = (userAccessId) => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        fetch(server + \"/userInput\", {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            body: JSON.stringify({\r\n                cardiomegaly: this.state.cardiomegaly,\r\n                edema: this.state.edema,\r\n                consolidation: this.state.consolidation,\r\n                atelectasis: this.state.atelectasis,\r\n                pleural_effusion: this.state.pleural_effusion,\r\n                active_tuberculosis: this.state.active_tuberculosis,\r\n                healed_tuberculosis: this.state.healed_tuberculosis,\r\n                metastasis: this.state.metastasis,\r\n                mass_lesion: this.state.mass_lesion,\r\n                calcification: this.state.calcification,\r\n                none: this.state.none,\r\n                userAccessId: userAccessId,\r\n            }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        }).then(response => response.json())\r\n            .then(responseJson => {\r\n                console.log(responseJson)\r\n                if (responseJson.status === 500) {\r\n                    this.setState({\r\n                        loading: false,\r\n                        open: true,\r\n                        alertMessage: 'Something went wrong, please contact system admin'\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        loading: false,\r\n                        open: true,\r\n                        alertMessage: 'Response submitted successfully',\r\n                        index: this.state.index + 1,\r\n                        inputSelection: 0,\r\n                        cardiomegaly: undefined,\r\n                        edema: undefined,\r\n                        consolidation: undefined,\r\n                        atelectasis: undefined,\r\n                        pleural_effusion: undefined,\r\n                        active_tuberculosis: undefined,\r\n                        healed_tuberculosis: undefined,\r\n                        metastasis: undefined,\r\n                        mass_lesion: undefined,\r\n                        calcification: undefined,\r\n                        none: undefined\r\n                    })\r\n                    console.log(this.state)\r\n                }\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    radiology = () => {\r\n        var { data, index } = this.state\r\n        while (index < data.length) {\r\n            var x = data[index];\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open('HEAD', server + '/' + x.image_path.split('.')[0] + '.' + x.image_path.split('.')[1], false);\r\n            xhr.send();\r\n            if (xhr.status == \"404\") {\r\n                // console.log('File not exist')\r\n                index++\r\n                continue;\r\n            } else {\r\n                return (\r\n                    <div style={{ flexGrow: 1, padding: '3%', margin: '3%' }}>\r\n                        <Grid container item direction='column' sm wrap='wrap' alignItems='center' alignContent='center' justify='center' spacing={2} >\r\n                            <Grid container item sm direction='row' justify='center' alignItems='center' wrap='wrap'>\r\n                                <Grid container item sm direction='column' justify='center' alignItems='center' wrap='wrap'>\r\n\r\n                                    <img\r\n                                        id=\"target\"\r\n                                        src={server + '/' + x.processed_image_path}\r\n                                        style={{ maxWidth: '100%' }}\r\n                                        alt='image'\r\n                                    />\r\n                                </Grid>\r\n                                <Grid container item sm direction='column' justify='center' alignItems='center' wrap='wrap'>\r\n                                    {x.report_path === null ?\r\n                                        <Typography variant='h6'> No report available </Typography> :\r\n                                        <a href={server + '/' + x.report_path} target=\"_blank\">Report</a>}\r\n                                </Grid>\r\n                                <Grid container item direction='column' justify='flex-start' alignItems='stretch' sm wrap='wrap'>\r\n                                    <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                        <Typography variant='h4' >Level 1 Input</Typography><br />\r\n                                    </Grid>\r\n                                    <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap' style={{ marginLeft: '5%' }}>\r\n                                        <FormGroup>\r\n                                            <FormControlLabel control={<Radio color='primary' name='cardiomegaly' checked={x.cardiomegaly === 1} disabled />} label=\"Cardiomegaly\" />\r\n                                            <FormControlLabel control={<Radio color='primary' name='edema' checked={x.edema === 1} disabled />} label=\"Edema\" />\r\n                                            <FormControlLabel control={<Radio color='primary' name='consolidation' checked={x.consolidation === 1} disabled />} label=\"Consolidation\" />\r\n                                            <FormControlLabel control={<Radio color='primary' name='atelectasis' checked={x.atelectasis === 1} disabled />} label=\"Atelectasis\" />\r\n                                            <FormControlLabel control={<Radio color='primary' name='pleural_effusion' checked={x.pleural_effusion === 1} disabled />} label=\"Pleural Effusion\" />\r\n                                            <FormControlLabel control={<Radio color='primary' name='active_tuberculosis' checked={x.active_tuberculosis === 1} disabled />} label=\"Active Tuberculosis\" />\r\n                                            <FormControlLabel control={<Radio color='primary' name='healed_tuberculosis' checked={x.healed_tuberculosis === 1} disabled />} label=\"Healed Tuberculosis\" />\r\n                                            <FormControlLabel control={<Radio color='primary' name='metastasis' checked={x.metastasis === 1} disabled />} label=\"Metastasis\" />\r\n                                            <FormControlLabel control={<Radio color='primary' name='mass_lesion' checked={x.mass_lesion === 1} disabled />} label=\"Mass Lesion\" />\r\n                                            <FormControlLabel control={<Radio color='primary' name='calcification' checked={x.calcification === 1} disabled />} label=\"Calcification\" />\r\n                                        </FormGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container item sm direction='column' wrap='wrap'>\r\n                                <Grid container item direction='row' justify='center' alignItems='baseline' sm wrap='wrap'>\r\n                                    <Grid container item direction='column' justify='flex-start' alignItems='stretch' sm wrap='wrap'>\r\n                                        <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                            <Typography variant='h4' >Please select the condition(s) for the uploaded X-Ray</Typography><br />\r\n                                        </Grid>\r\n                                        <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                            <FormGroup>\r\n                                                <FormControlLabel control={<Checkbox color='primary' name='cardiomegaly' onChange={this.onChange} />} label=\"Cardiomegaly\" />\r\n                                                <FormControlLabel control={<Checkbox color='primary' name='edema' onChange={this.onChange} />} label=\"Edema\" />\r\n                                                <FormControlLabel control={<Checkbox color='primary' name='consolidation' onChange={this.onChange} />} label=\"Consolidation\" />\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                                <FormControlLabel control={<Checkbox color='primary' name='atelectasis' onChange={this.onChange} />} label=\"Atelectasis\" />\r\n                                                <FormControlLabel control={<Checkbox color='primary' name='pleural_effusion' onChange={this.onChange} />} label=\"Pleural Effusion\" />\r\n                                                <FormControlLabel control={<Checkbox color='primary' name='active_tuberculosis' onChange={this.onChange} />} label=\"Active Tuberculosis\" />\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                                <FormControlLabel control={<Checkbox color='primary' name='healed_tuberculosis' onChange={this.onChange} />} label=\"Healed Tuberculosis\" />\r\n                                                <FormControlLabel control={<Checkbox color='primary' name='metastasis' onChange={this.onChange} />} label=\"Metastasis\" />\r\n                                                <FormControlLabel control={<Checkbox color='primary' name='mass_lesion' onChange={this.onChange} />} label=\"Mass Lesion\" />\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                                <FormControlLabel control={<Checkbox color='primary' name='calcification' onChange={this.onChange} />} label=\"Calcification\" />\r\n                                                <FormControlLabel control={<Checkbox color='primary' name='none' onChange={this.onChange} />} label=\"None\" />\r\n                                            </FormGroup>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container item direction='row' justify='center' alignItems='center' sm wrap='wrap'>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        disabled={this.state.inputSelection == 0}\r\n                                        onClick={() => {\r\n                                            this.calculate(x.id)\r\n                                            index++\r\n                                        }}\r\n                                        variant='contained'\r\n                                        style={{ marginRight: '2.5%', marginTop: '1%' }}\r\n                                    >\r\n                                        Submit\r\n                                    </Button>\r\n                                    <Button type='reset' onClick={this.goHome} variant='contained' style={{ marginLeft: '2.5%', marginTop: '1%' }}>\r\n                                        Cancel\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                            {this.alert()}\r\n                        </Grid>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        return (\r\n            <div style={{ flexGrow: 1, padding: '3%', margin: '3%' }}>\r\n                <Grid container item direction='column' sm wrap='wrap' alignItems='center' alignContent='center' justify='center' spacing={2} >\r\n                    <Typography variant='h3'>\r\n                        Nothing to show\r\n                    </Typography>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    goHome = () => {\r\n        window.location.reload();\r\n        // this.setState({\r\n        //     selectedFile: null,\r\n        //     preview: null,\r\n        //     limit: null\r\n        // })\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            [event.target.name]: event.target.checked,\r\n            inputSelection: event.target.checked === true ? this.state.inputSelection + 1 : (this.state.inputSelection === 0 ? 0 : this.state.inputSelection - 1)\r\n        })\r\n    }\r\n\r\n    alert = () => (\r\n        <Snackbar\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            open={this.state.open}\r\n            onClose={() => this.setState({ open: !this.state.open })}\r\n            autoHideDuration={2000}\r\n            message={this.state.alertMessage}\r\n        />\r\n    )\r\n\r\n    /* result = () => {\r\n        if (this.state.responseData.isError === 'true' && this.state.responseData.message == 'Raising error: unwantedImage') {\r\n            return (\r\n                <Dialog\r\n                    open={this.state.responseData.isError === 'true' && this.state.responseData.message == 'Raising error: unwantedImage'}\r\n                    onClose={this.goHome}\r\n                >\r\n                    <DialogTitle style={{ backgroundColor: '#3F51B5', color: 'white' }}>{\"Invalid Image\"}</DialogTitle>\r\n                    <DialogContent style={{ marginTop: 20 }}>\r\n                        <DialogContentText color='black'>\r\n                            Please upload valid chest x-ray image.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.goHome}>\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            )\r\n        } else if (this.state.responseData.isError === 'false') {\r\n            const d = this.state.responseData.result;\r\n            const data = [\r\n                {\r\n                    'name': 'Cardiomegaly',\r\n                    'value': (d[2] * 100).toFixed(2),\r\n                    'threshold': threshold.Cardiomegaly,\r\n                }, {\r\n                    'name': 'Edema',\r\n                    'value': (d[3] * 100).toFixed(2),\r\n                    'threshold': threshold.Edema,\r\n                }, {\r\n                    'name': 'Consolidation',\r\n                    'value': (d[4] * 100).toFixed(2),\r\n                    'threshold': threshold.Consolidation,\r\n                }, {\r\n                    'name': 'Atelectasis',\r\n                    'value': (d[5] * 100).toFixed(2),\r\n                    'threshold': threshold.Atelectasis,\r\n                }, {\r\n                    'name': 'Pleural Effusion',\r\n                    'value': (d[6] * 100).toFixed(2),\r\n                    'threshold': threshold.Pleural_Effusion,\r\n                }\r\n            ]\r\n            const colors = ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921']\r\n            return (\r\n                <div style={{ flexGrow: 1, padding: '5%' }}>\r\n                    <Grid container justify='center' wrap='wrap' spacing={1} direction='column'>\r\n                        <Grid item sm container wrap='wrap' justify='center' alignItems='center' spacing={1} >\r\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\r\n                                <img\r\n                                    src={server + '/' + d[1].split('.')[0] + '_' + sessionStorage.getItem('UserId') + '.' + d[1].split('.')[1]}\r\n                                    style={{ maxWidth: '100%' }}\r\n                                    alt='' />\r\n                            </Grid>\r\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\r\n                                <TableContainer>\r\n                                    <ResponsiveContainer height={400} minWidth={700}>\r\n                                        <ComposedChart data={data}>\r\n                                            <XAxis dataKey='name' />\r\n                                            <YAxis />\r\n                                            <Tooltip />\r\n                                            <Legend\r\n                                                align='center'\r\n                                                verticalAlign='bottom'\r\n                                                content={() => (\r\n                                                    <List style={{ display: 'flex', flexDirection: \"row\", flexWrap: 'wrap', paddingLeft: '10%' }}>\r\n                                                        <li style={{ color: 'black', listStyleType: 'square', marginRight: '5%' }}>\r\n                                                            <Typography variant='caption' style={{ color: \"black\" }}>cut-off line</Typography>\r\n                                                        </li>\r\n                                                    </List>\r\n                                                )} />\r\n                                            <Bar dataKey='value'>\r\n                                                {\r\n                                                    data.map((entry, i) => (\r\n                                                        <Cell key={`cell-${i}`} fill={colors[i]} stroke={colors[i]} />\r\n                                                    ))\r\n                                                }\r\n                                            </Bar>\r\n                                            <Line dataKey='threshold' stroke='black' />\r\n                                        </ComposedChart>\r\n                                    </ResponsiveContainer>\r\n                                </TableContainer>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item sm container wrap='wrap' alignContent='center' alignItems='center' justify='center' spacing={1}>\r\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\r\n                                <ul>\r\n                                    <li>Bar graph of any condition above the cut-off line indicates the positive result of that condition in the supplied xray</li>\r\n                                    <li>Please submit your analysis of xray conditions through the table below the graph.</li>\r\n                                    <li>Select Yes/No for all conditions and press 'Submit Feedback' button</li>\r\n                                    <li>Please refrain from submitting incomplete/wrong feedback</li>\r\n                                </ul>\r\n                                <Button\r\n                                    variant='contained'\r\n                                    onClick={this.submitFeedback}\r\n                                    disabled={\r\n                                        this.state.feedback.cardiomegaly === null ||\r\n                                        this.state.feedback.edema === null ||\r\n                                        this.state.feedback.consolidation === null ||\r\n                                        this.state.feedback.atelectasis === null ||\r\n                                        this.state.feedback.pleural_effusion === null\r\n                                    }>\r\n                                    Submit feedback\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid container item sm wrap='wrap'>\r\n                                <TableContainer>\r\n                                    <Table style={{ border: '2px solid black', minWidth: 650 }}>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell align='center'>Cardiomegaly</TableCell>\r\n                                                <TableCell align='center'>Edema</TableCell>\r\n                                                <TableCell align='center'>Consolidation</TableCell>\r\n                                                <TableCell align='center'>Atelectasis</TableCell>\r\n                                                <TableCell align='center'>Pleural effusion</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell align='center'>{(d[2] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[3] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[4] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[5] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[6] * 100).toFixed(2) + '%'}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='cardiomegaly' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='edema' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='consolidation' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='atelectasis' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='pleural_effusion' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            )\r\n        } else {\r\n            this.setState({\r\n                open: true,\r\n                alertMessage: 'Error occured, contact system admin'\r\n            })\r\n            return this.alert();\r\n        }\r\n    }\r\n    \r\n    feedbackChangeHandler = (e) => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            feedback: {\r\n                ...this.state.feedback,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n    \r\n    submitFeedback = () => {\r\n        this.props.resultAction(false)\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        fetch(server + '/feedback/' + this.state.responseData.feedbackResponseId, {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            body: JSON.stringify({\r\n                feedback: this.state.feedback\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                this.setState({\r\n                    loading: false,\r\n                    feedbackSubmitted: true,\r\n                    selectedFile: null,\r\n                    responseData: null,\r\n                    preview: null,\r\n                    limit: false,\r\n                    open: true,\r\n                    alertMessage: 'feedback added successfully'\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    loading: false,\r\n                    selectedFile: null,\r\n                    responseData: null,\r\n                    preview: null,\r\n                    limit: false,\r\n                    open: true,\r\n                    alertMessage: 'error while submitting feedback'\r\n                })\r\n            }\r\n        })\r\n    } */\r\n\r\n    /* render() {\r\n        if (!this.props.history.history) {\r\n            if (this.state.loading) {\r\n                return (\r\n                    <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                        <CircularProgress\r\n                            disableShrink\r\n                        />\r\n                    </Grid>\r\n                )\r\n            } else if (this.props.result.result) {\r\n                return this.result();\r\n            } else if (this.state.limit) {\r\n                return (\r\n                    <Grid container justify='center' direction='column' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                        <Typography variant=\"h4\">\r\n                            You have reached max limit. Please contact admin\r\n                        </Typography>\r\n                        <br />\r\n                        <Button onClick={this.goHome}>\r\n                            Home\r\n                        </Button>\r\n                    </Grid>\r\n                )\r\n            } else {\r\n                return this.radiology();\r\n            }\r\n        } else {\r\n            return <History />\r\n        }\r\n    \r\n    } */\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (\r\n                <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                    <CircularProgress\r\n                        disableShrink\r\n                    />\r\n                </Grid>\r\n            )\r\n        } else {\r\n            return this.radiology();\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    userId: state.userId,\r\n    history: state.history,\r\n    result: state.result\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    resultAction: status => {\r\n        dispatch(result(status))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Radiology));\r\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store';\nimport { HashRouter as Router, Switch, Route, Link, Routes } from 'react-router-dom';\nimport Radiology from './components/Radiology/Radiology';\nimport Header from './components/Header/Header';\nimport History from './components/History/History';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Routes>\n                <Route path='/' element={<App />} />\n                <Route path='/radiology' element={<Fragment><Header /> <Radiology /></Fragment>} />\n                <Route path='/history' element={<Fragment><Header /> <History /></Fragment>} />\n            </Routes>\n        </Router>\n        {/* <App /> */}\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}