{"version":3,"sources":["redux/action.js","properties.js","components/History/History.js","constants/threshold.js","components/UploadImage/UploadImage.js","components/Login/Login.js","components/Header/Header.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["login","status","type","payload","history","result","server","History","props","Grid","container","justify","state","data","map","d","i","cardiomegaly","toFixed","edema","consolidation","atelectasis","pleural_effusion","colors","item","xs","style","background","marginTop","Typography","variant","color","align","Intl","DateTimeFormat","year","month","day","hour","minute","second","hour12","format","Date","access_dts","display","marginRight","marginLeft","src","image_path","split","localStorage","getItem","alt","width","height","fontSize","tick","layout","verticalAlign","content","entry","key","listStyleType","name","dataKey","fill","stroke","alignContent","alignItems","Button","onClick","updateFeedbackHandler","userFeedback","id","Table","border","marginBottom","TableBody","TableRow","TableCell","FormControl","RadioGroup","value","onChange","e","feedbackChangeHandler","user_access_details_id","FormControlLabel","control","Radio","label","alert","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","setState","autoHideDuration","message","target","index","findIndex","x","newState","loading","fetch","method","mode","body","JSON","stringify","feedback","headers","then","response","console","log","catch","home","historyAction","this","sessionStorage","respose","json","responseJson","minHeight","CircularProgress","disableShrink","Component","connect","userId","dispatch","withStyles","theme","offset","mixins","toolbar","root","flexGrow","paper","padding","spacing","textAlign","palette","text","secondary","img","margin","maxWidth","maxHeight","justifyContent","threshold","Input","styled","UploadImage","onChangeHandler","event","reader","FileReader","file","files","selectedFile","preview","fileName","extension","substring","lastIndexOf","onloadend","invalidFile","readAsDataURL","alertMessage","calculate","FormData","append","none","limit","responseData","error","uploadImage","direction","sm","wrap","htmlFor","accept","endIcon","PhotoCamera","component","FormGroup","Checkbox","disabled","inputSelection","goHome","window","location","reload","checked","isError","Dialog","DialogTitle","backgroundColor","DialogContent","DialogContentText","DialogActions","TableContainer","minWidth","List","flexDirection","flexWrap","paddingLeft","submitFeedback","resultAction","feedbackResponseId","feedbackSubmitted","isFeedbackSet","upload","Login","ckeckInput","msg","username","password","loginAction","onSubmit","userAction","userNameAction","setItem","TextField","fullWidth","Header","header","AppBar","position","Toolbar","logout","clear","userName","drawer","App","Boolean","hostname","match","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0UAMaA,EAAQ,SAACC,GAClB,MAAM,CACFC,KARa,QASbC,QAASF,IAkBJG,EAAU,SAACH,GACpB,MAAO,CACHC,KA1Be,UA2BfC,QAASF,IAIJI,EAAS,SAACJ,GACnB,MAAO,CACHC,KAhCc,SAiCdC,QAASF,I,kCCpCJK,G,OAAS,4B,oIC6ChBC,E,kDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA+BVJ,QAAU,WACN,OACI,kBAACK,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UAEhB,EAAKC,MAAMC,KAAKC,KAAI,SAACC,EAAGC,GACpB,IAAMH,EAAO,CACT,CACI,KAAQ,eACR,OAA2B,IAAjBE,EAAEE,cAAoBC,QAAQ,GACxC,UAAa,OACd,CACC,KAAQ,QACR,OAAoB,IAAVH,EAAEI,OAAaD,QAAQ,GACjC,UAAa,OACd,CACH,KAAQ,gBACJ,OAA4B,IAAlBH,EAAEK,eAAqBF,QAAQ,GACzC,UAAa,MACd,CACH,KAAQ,cACJ,OAA0B,IAAhBH,EAAEM,aAAmBH,QAAQ,GACvC,UAAa,OACd,CACH,KAAQ,mBACJ,OAA+B,IAArBH,EAAEO,kBAAwBJ,QAAQ,GAC5C,UAAa,QAGfK,EAAS,CAAC,UAAU,UAAU,UAAU,UAAU,WACxD,OACI,kBAACd,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAACC,GAAI,GAAIC,MAAO,CAACC,WAAY,YAAaC,UAAW,OACrE,kBAACnB,EAAA,EAAD,CAAMe,MAAI,EAACC,GAAI,IACX,kBAACI,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAUC,MAAM,UAC1C,IAAIC,KAAKC,eAAe,QAAS,CAC9BC,KAAM,UACNC,MAAO,OACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,QAAQ,IAETC,OAAO,IAAIC,KAAK5B,EAAE6B,eAG7B,kBAACnC,EAAA,EAAD,CAAMe,MAAI,EAACC,GAAI,GACX,yBACIC,MAAO,CAACmB,QAAS,QAASC,YAAa,OAAQC,WAAY,QAC3DC,IAAK1C,EAAS,IAAMS,EAAEkC,WAAWC,MAAM,KAAK,GAAK,IAAMC,aAAaC,QAAQ,UAAY,IAAMrC,EAAEkC,WAAWC,MAAM,KAAK,GACtHG,IAAI,GACJC,MAAO,IACPC,OAAQ,OAGhB,kBAAC9C,EAAA,EAAD,CAAMe,MAAI,EAACC,GAAI,GACX,kBAAC,IAAD,CACIC,MAAO,CAAC8B,SAAU,qBAClBF,MAAO,IACPC,OAAQ,IACR1C,KAAMA,GACN,kBAAC,IAAD,CAAO4C,MAAM,IACb,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAQzB,MAAM,QAAQ0B,OAAO,WAAWC,cAAc,SAASC,QAAS,kBACpE,4BAEQ/C,EAAKC,KAAI,SAAC+C,EAAO7C,GAAR,OACL,wBAAI8C,IAAK9C,EAAGU,MAAO,CAAEK,MAAOR,EAAOP,GAAI+C,cAAe,WAClD,uBAAGrC,MAAO,CAAEK,MAAO,UAAY8B,EAAMG,cAMzD,kBAAC,IAAD,CAAKC,QAAQ,SAELpD,EAAKC,KAAI,SAAC+C,EAAO7C,GAAR,OACL,kBAAC,IAAD,CAAM8C,IAAG,eAAU9C,GAAKkD,KAAM3C,EAAOP,GAAImD,OAAQ5C,EAAOP,SAIpE,kBAAC,IAAD,CAAMiD,QAAQ,gBAGtB,kBAACxD,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAACC,GAAI,EAAG2C,aAAa,SAASC,WAAW,SAAS1D,QAAQ,UAC1E,kBAAC2D,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,sBAAsBxD,EAAGD,EAAE0D,aAAaC,MAApE,oBAIJ,kBAACjE,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAACC,GAAI,GACrB,kBAACkD,EAAA,EAAD,CAAOjD,MAAO,CAACkD,OAAQ,kBAAmB9B,YAAa,KAAM+B,aAAc,OACvE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWhD,MAAM,UAAjB,gBACA,kBAACgD,EAAA,EAAD,CAAWhD,MAAM,UAAjB,SACA,kBAACgD,EAAA,EAAD,CAAWhD,MAAM,UAAjB,iBACA,kBAACgD,EAAA,EAAD,CAAWhD,MAAM,UAAjB,eACA,kBAACgD,EAAA,EAAD,CAAWhD,MAAM,UAAjB,qBAEJ,kBAAC+C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIhD,MAAM,WAA4B,IAAjBjB,EAAEE,cAAoBC,QAAQ,GAAK,KACxD,kBAAC8D,EAAA,EAAD,CAAWhD,MAAM,WAAqB,IAAVjB,EAAEI,OAAaD,QAAQ,GAAK,KACxD,kBAAC8D,EAAA,EAAD,CACIhD,MAAM,WAA6B,IAAlBjB,EAAEK,eAAqBF,QAAQ,GAAK,KACzD,kBAAC8D,EAAA,EAAD,CACIhD,MAAM,WAA2B,IAAhBjB,EAAEM,aAAmBH,QAAQ,GAAK,KACvD,kBAAC8D,EAAA,EAAD,CACIhD,MAAM,WAAgC,IAArBjB,EAAEO,kBAAwBJ,QAAQ,GAAK,MAEhE,kBAAC6D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWhD,MAAM,UACb,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYlB,KAAK,eACLmB,MAAOpE,EAAE0D,aAAaxD,aACtBmE,SAAU,SAAAC,GAAC,OAAI,EAAKC,sBAAsBD,EAAGtE,EAAE0D,aAAac,0BACpE,kBAACC,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAUC,MAAM,MACzBR,MAAM,QACxB,kBAACK,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAUC,MAAM,KAAKR,MAAM,UAIlE,kBAACH,EAAA,EAAD,CAAWhD,MAAM,UACb,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYlB,KAAK,QAAQmB,MAAOpE,EAAE0D,aAAatD,MACnCiE,SAAU,SAAAC,GAAC,OAAI,EAAKC,sBAAsBD,EAAGtE,EAAE0D,aAAac,0BACpE,kBAACC,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAUC,MAAM,MACzBR,MAAM,QACxB,kBAACK,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAUC,MAAM,KAAKR,MAAM,UAIlE,kBAACH,EAAA,EAAD,CAAWhD,MAAM,UACb,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYlB,KAAK,gBACLmB,MAAOpE,EAAE0D,aAAarD,cACtBgE,SAAU,SAAAC,GAAC,OAAI,EAAKC,sBAAsBD,EAAGtE,EAAE0D,aAAac,0BACpE,kBAACC,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAUC,MAAM,MACzBR,MAAM,QACxB,kBAACK,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAUC,MAAM,KAAKR,MAAM,UAIlE,kBAACH,EAAA,EAAD,CAAWhD,MAAM,UACb,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYlB,KAAK,cACLmB,MAAOpE,EAAE0D,aAAapD,YACtB+D,SAAU,SAAAC,GAAC,OAAI,EAAKC,sBAAsBD,EAAGtE,EAAE0D,aAAac,0BACpE,kBAACC,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAUC,MAAM,MACzBR,MAAM,QACxB,kBAACK,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAUC,MAAM,KAAKR,MAAM,UAIlE,kBAACH,EAAA,EAAD,CAAWhD,MAAM,UACb,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYlB,KAAK,mBACLmB,MAAOpE,EAAE0D,aAAanD,iBACtB8D,SAAU,SAAAC,GAAC,OAAI,EAAKC,sBAAsBD,EAAGtE,EAAE0D,aAAac,0BACpE,kBAACC,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAUC,MAAM,MACzBR,MAAM,QACxB,kBAACK,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAUC,MAAM,KAAKR,MAAM,kBAWjG,EAAKS,UA3MC,EAgNnBA,MAAQ,kBACJ,kBAACC,EAAA,EAAD,CACIC,aAAc,CAACC,SAAU,MAAOC,WAAY,UAC5CC,KAAM,EAAKrF,MAAMqF,KACjBC,QAAS,kBAAM,EAAKC,SAAS,CAACF,MAAO,EAAKrF,MAAMqF,QAChDG,iBAAkB,IAClBC,QAAS,EAAKzF,MAAMyF,WAtNT,EA0NnBf,sBAAwB,SAACD,EAAGX,GAAQ,IAAD,EACTW,EAAEiB,OAAjBtC,EADwB,EACxBA,KAAMmB,EADkB,EAClBA,MACToB,EAAQ,EAAK3F,MAAMC,KAAK2F,WAAU,SAAAC,GAAC,OAAIA,EAAEhC,aAAac,yBAA2Bb,KACjFgC,EAAQ,YAAO,EAAK9F,MAAMC,MAC9B6F,EAASH,GAAO9B,aAAhB,2BACOiC,EAASH,GAAO9B,cADvB,kBAEKT,EAAOmB,IAEZ,EAAKgB,SAAS,CACVtF,KAAM6F,KAnOK,EAuOnBlC,sBAAwB,SAAC+B,EAAO7B,GAC5B,EAAKyB,SAAS,CACVQ,SAAS,IAEbC,MAAMtG,EAAS,aAAeoE,EAAI,CAC9BmC,OAAQ,MACRC,KAAM,OACNC,KAAMC,KAAKC,UAAU,CACjBC,SAAU,EAAKtG,MAAMC,KAAK0F,GAAO9B,eAErC0C,QAAS,CACL,eAAgB,sBAErBC,MAAK,SAAAC,GACAC,QAAQC,IAAIF,GACY,MAApBA,EAASpH,OACT,EAAKkG,SAAS,CACVQ,SAAS,EACTV,MAAM,EACNI,QAAS,kCAGb,EAAKF,SAAS,CACVQ,SAAS,EACTV,MAAM,EACNI,QAAS,uDAIvBmB,OAAM,SAAAnC,GACJ,EAAKc,SAAS,CACVQ,SAAS,EACTV,MAAM,EACNI,QAAShB,QAxQF,EA6QnBoC,KAAO,WACH,EAAKjH,MAAMkH,eAAc,GACzB,EAAKvB,SAAS,CACVsB,MAAM,KA9QV,EAAK7G,MAAQ,CACTC,KAAM,GACNiD,IAAK,GACL2D,MAAM,EACNd,SAAS,EACTV,MAAM,EACNI,QAAS,IARE,E,gEAaE,IAAD,OAChBsB,KAAKxB,SAAS,CAACQ,SAAS,IACxBC,MAAMtG,EAAS,YAAcsH,eAAexE,QAAQ,UAAW,CAC3DyD,OAAQ,MACRC,KAAM,OACNK,QAAS,CACL,OAAU,mBACV,eAAgB,mBAChB,8BAA+B,OAEpCC,MAAK,SAAAS,GAAO,OAAIA,EAAQC,UACtBV,MAAK,SAAAW,GACF,EAAK5B,SAAS,CACVtF,KAAMkH,EAAalH,KACnB8F,SAAS,OAEda,OAAM,SAAAnC,GAAC,OAAIiC,QAAQC,IAAIlC,Q,+BAwP9B,OAAIsC,KAAK/G,MAAM+F,QAEP,kBAAClG,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAACb,QAAQ,SAAS0D,WAAW,SAAS3C,MAAO,CAACsG,UAAW,SACzE,kBAACC,EAAA,EAAD,CACIC,eAAa,KAKrBP,KAAK/G,MAAM6G,KACJ,kBAAC,GAAD,MAEAE,KAAKvH,c,GAnSN+H,aAmTPC,eAVS,SAAAxH,GAAK,MAAK,CAC9ByH,OAAQzH,EAAMyH,WAGS,SAAAC,GAAQ,MAAK,CACpCZ,cAAe,SAAAzH,GACXqI,EAASlI,EAAQH,QAIVmI,CAA6CG,aA1U7C,SAAAC,GAAK,MAAK,CACrBC,OAAQD,EAAME,OAAOC,QACrBC,KAAM,CACFC,SAAU,GAEdC,MAAO,CACHC,QAASP,EAAMQ,QAAQ,GACvBC,UAAW,SACXlH,MAAOyG,EAAMU,QAAQC,KAAKC,WAE9BC,IAAK,CACDC,OAAQ,OACRzG,QAAS,QACT0G,SAAU,MACVC,UAAW,OAEfhI,KAAM,CACF4C,aAAc,SACdC,WAAY,SACZoF,eAAgB,aAuToClB,CAAmBhI,I,iFCjWlEmJ,EACK,MADLA,EAEF,MAFEA,EAGM,KAHNA,EAII,MAJJA,EAKS,M,kBCkBhBC,EAAQC,YAAO,QAAPA,CAAgB,CAC1B/G,QAAS,SAaPgH,E,kDAEF,WAAYrJ,GAAQ,IAAD,8BACf,cAAMA,IAuBVsJ,gBAAkB,SAAAC,GACd,IAAIC,EAAS,IAAIC,WACXC,EAAOH,EAAMzD,OAAO6D,MAAM,GAKhC,GAJA,EAAKhE,SAAS,CACViE,aAAc,KACdC,QAAS,OAETH,EAAM,CACN,IAAMI,EAAWP,EAAMzD,OAAO6D,MAAM,GAAGnG,KACjCuG,EAAYD,EAASE,UAAUF,EAASG,YAAY,KAAO,GAC/C,QAAdF,GAAqC,QAAdA,GAAqC,SAAdA,GAAsC,QAAdA,GAAqC,QAAdA,GAAqC,SAAdA,GACpHP,EAAOU,UAAY,WACf,EAAKvE,SAAS,CACVwE,aAAa,EACbP,aAAcF,EACdG,QAASL,EAAO3J,UAGxB2J,EAAOY,cAAcV,IAErB,EAAK/D,SAAS,CACVwE,aAAa,EACb1E,MAAM,EACN4E,aAAc,oBA/CX,EAqDnBC,UAAY,WAKR,GAJAxD,QAAQC,IAAI,UAAW,EAAK3G,OAC5B,EAAKuF,SAAS,CACVQ,SAAS,IAEmB,OAA5B,EAAK/F,MAAMwJ,aACXxE,MAAM,uBACN,EAAKO,SAAS,CACVQ,SAAS,EACTV,MAAM,EACN4E,aAAc,4BAEf,CACH,IAAIhK,EAAO,IAAIkK,SACflK,EAAKmK,OAAO,QAAS,EAAKpK,MAAMwJ,cAChCvJ,EAAKmK,OAAO,eAAgB,EAAKpK,MAAMK,cACvCJ,EAAKmK,OAAO,QAAS,EAAKpK,MAAMO,OAChCN,EAAKmK,OAAO,gBAAiB,EAAKpK,MAAMQ,eACxCP,EAAKmK,OAAO,cAAe,EAAKpK,MAAMS,aACtCR,EAAKmK,OAAO,mBAAoB,EAAKpK,MAAMU,kBAC3CT,EAAKmK,OAAO,OAAQ,EAAKpK,MAAMqK,MAE/BrE,MAAMtG,EAAS,cAAgBsH,eAAexE,QAAQ,UAAW,CAC7DyD,OAAQ,OACRC,KAAM,OACNC,KAAMlG,EACNsG,QAAS,CACL,OAAU,wBACV,8BAA+B,OAEpCC,MAAK,SAAAC,GAAQ,OAAIA,EAASS,UACxBV,MAAK,SAAAW,GACwB,OAAtBA,EAAalH,KACb,EAAKsF,SAAS,CACVQ,SAAS,EACTuE,OAAO,IAGX,EAAK/E,SAAS,CACVQ,SAAS,EACTwE,aAAcpD,EAAalH,KAC3BwJ,QAAS,KACTD,aAAc,KACdnE,MAAM,EACN4E,aAAc,mCAKzBrD,OAAM,SAAA4D,GAAK,OAAI9D,QAAQC,IAAI6D,QAtGrB,EA0GnBC,YAAc,WACV,OACI,yBAAK3J,MAAO,CAAEmH,SAAU,EAAGE,QAAS,KAAMO,OAAQ,OAC9C,kBAAC7I,EAAA,EAAD,CAAMC,WAAS,EAAC4K,UAAU,MAAMC,IAAE,EAACC,KAAK,OAAOnH,WAAW,SAASD,aAAa,SAASzD,QAAQ,SAASqI,QAAS,GAC/G,kBAACvI,EAAA,EAAD,CAAMC,WAAS,EAAC6K,GAAI,EAAGD,UAAU,SAAS3K,QAAQ,SAAS0D,WAAW,SAASmH,KAAK,QAChF,kBAAC/K,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAAC+J,IAAE,EAACD,UAAU,SAAS3K,QAAQ,SAAS0D,WAAW,SAASmH,KAAK,QACjF,kBAAC3J,EAAA,EAAD,CAAYH,MAAO,CAAEqH,QAAS,YAAajH,QAAQ,MAAnD,gBACA,kBAACD,EAAA,EAAD,CAAYH,MAAO,CAAEqH,QAAS,QAA9B,eACA,yBACIrE,GAAG,SACH1B,IAAK1C,EAAS,cACdoB,MAAO,CAAE6H,SAAU,QACnBlG,IAAI,iBAER,6BACA,4BACI,uEACA,+EAAoD,6BAApD,8BACA,6EACA,iEAIZ,kBAAC5C,EAAA,EAAD,CAAMC,WAAS,EAAC4K,UAAU,SAASC,IAAE,EAACC,KAAK,QACvC,kBAAC/K,EAAA,EAAD,CAAMC,WAAS,EAAC4K,UAAU,MAAM3K,QAAQ,SAAS0D,WAAW,SAASkH,IAAE,EAACC,KAAK,QACzE,kBAAC/K,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAAC8J,UAAU,SAAS3K,QAAQ,aAAa0D,WAAW,SAASkH,IAAE,EAACC,KAAK,QAGrF,2BAAOC,QAAQ,iBACX,kBAAC9B,EAAD,CACI5H,MAAM,UACN2C,GAAG,gBACHxE,KAAK,OACLwL,OAAO,UACPtG,SAAU,EAAK0E,kBAEnB,kBAACxF,EAAA,EAAD,CAAQxC,QAAQ,YAAY6J,QAAS,kBAACC,EAAA,EAAD,MAAiBC,UAAU,QAAhE,WAIJ,yBACInH,GAAG,SACH1B,IAAK,EAAKpC,MAAMyJ,QAChB3I,MAAO,CAAE6H,SAAU,QACnBlG,IAAI,KAEP,EAAKuC,SAEV,kBAACnF,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAAC8J,UAAU,MAAM3K,QAAQ,aAAa0D,WAAW,UAAUkH,IAAE,EAACC,KAAK,QAGnF,kBAAC3J,EAAA,EAAD,CAAYC,QAAQ,MAApB,yDAA4F,6BAC5F,kBAACgK,EAAA,EAAD,KACI,kBAACtG,EAAA,EAAD,CAAkBC,QAAS,kBAACsG,EAAA,EAAD,CAAUhK,MAAM,UAAUiC,KAAK,eAAeoB,SAAU,EAAKA,WAAcO,MAAM,iBAC5G,kBAACH,EAAA,EAAD,CAAkBC,QAAS,kBAACsG,EAAA,EAAD,CAAUhK,MAAM,UAAUiC,KAAK,QAAQoB,SAAU,EAAKA,WAAcO,MAAM,UACrG,kBAACH,EAAA,EAAD,CAAkBC,QAAS,kBAACsG,EAAA,EAAD,CAAUhK,MAAM,UAAUiC,KAAK,gBAAgBoB,SAAU,EAAKA,WAAcO,MAAM,kBAC7G,kBAACH,EAAA,EAAD,CAAkBC,QAAS,kBAACsG,EAAA,EAAD,CAAUhK,MAAM,UAAUiC,KAAK,cAAcoB,SAAU,EAAKA,WAAcO,MAAM,gBAC3G,kBAACH,EAAA,EAAD,CAAkBC,QAAS,kBAACsG,EAAA,EAAD,CAAUhK,MAAM,UAAUiC,KAAK,mBAAmBoB,SAAU,EAAKA,WAAcO,MAAM,qBAChH,kBAACH,EAAA,EAAD,CAAkBC,QAAS,kBAACsG,EAAA,EAAD,CAAUhK,MAAM,UAAUiC,KAAK,OAAOoB,SAAU,EAAKA,WAAcO,MAAM,YAIhH,kBAAClF,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAAC8J,UAAU,MAAM3K,QAAQ,SAAS0D,WAAW,WAAWkH,IAAE,EAACC,KAAK,QAChF,kBAAClH,EAAA,EAAD,CACIpE,KAAK,SACL8L,SAAU,EAAKpL,MAAM+J,aAA2C,OAA5B,EAAK/J,MAAMwJ,cAAuD,IAA9B,EAAKxJ,MAAMqL,eACnF1H,QAAS,EAAKuG,UACdhJ,QAAQ,YACRJ,MAAO,CAAEoB,YAAa,KAAMlB,UAAW,SAL3C,UASA,kBAAC0C,EAAA,EAAD,CAAQpE,KAAK,QAAQqE,QAAS,EAAK2H,OAAQpK,QAAQ,aAAnD,eAlLL,EA4LnBoK,OAAS,WACLC,OAAOC,SAASC,UA7LD,EAqMnBjH,SAAW,SAAC2E,GAAW,IAAD,EAClB,EAAK5D,SAAL,2BACO,EAAKvF,OADZ,uBAEKmJ,EAAMzD,OAAOtC,KAAO+F,EAAMzD,OAAOgG,SAFtC,gCAG6C,IAAzBvC,EAAMzD,OAAOgG,QAAmB,EAAK1L,MAAMqL,eAAiB,EAAmC,IAA9B,EAAKrL,MAAMqL,eAAuB,EAAI,EAAKrL,MAAMqL,eAAiB,GAHvJ,MAtMe,EA6MnBrG,MAAQ,kBACJ,kBAACC,EAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CC,KAAM,EAAKrF,MAAMqF,KACjBC,QAAS,kBAAM,EAAKC,SAAS,CAAEF,MAAO,EAAKrF,MAAMqF,QACjDG,iBAAkB,IAClBC,QAAS,EAAKzF,MAAMiK,gBAnNT,EAuNnBxK,OAAS,WACL,GAAwC,SAApC,EAAKO,MAAMuK,aAAaoB,SAAyD,gCAAnC,EAAK3L,MAAMuK,aAAa9E,QACtE,OACI,kBAACmG,EAAA,EAAD,CACIvG,KAA0C,SAApC,EAAKrF,MAAMuK,aAAaoB,SAAyD,gCAAnC,EAAK3L,MAAMuK,aAAa9E,QAC5EH,QAAS,EAAKgG,QAEd,kBAACO,EAAA,EAAD,CAAa/K,MAAO,CAAEgL,gBAAiB,UAAW3K,MAAO,UAAY,iBACrE,kBAAC4K,EAAA,EAAD,CAAejL,MAAO,CAAEE,UAAW,KAC/B,kBAACgL,EAAA,EAAD,CAAmB7K,MAAM,SAAzB,2CAIJ,kBAAC8K,EAAA,EAAD,KACI,kBAACvI,EAAA,EAAD,CAAQC,QAAS,EAAK2H,QAAtB,QAMT,GAAwC,UAApC,EAAKtL,MAAMuK,aAAaoB,QAAqB,CACpD,IAAMxL,EAAI,EAAKH,MAAMuK,aAAa9K,OAC5BQ,EAAO,CACT,CACI,KAAQ,eACR,OAAiB,IAAPE,EAAE,IAAUG,QAAQ,GAC9B,UAAawI,GACd,CACC,KAAQ,QACR,OAAiB,IAAP3I,EAAE,IAAUG,QAAQ,GAC9B,UAAawI,GACd,CACC,KAAQ,gBACR,OAAiB,IAAP3I,EAAE,IAAUG,QAAQ,GAC9B,UAAawI,GACd,CACC,KAAQ,cACR,OAAiB,IAAP3I,EAAE,IAAUG,QAAQ,GAC9B,UAAawI,GACd,CACC,KAAQ,mBACR,OAAiB,IAAP3I,EAAE,IAAUG,QAAQ,GAC9B,UAAawI,IAGfnI,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WAC5D,OACI,yBAAKG,MAAO,CAAEmH,SAAU,EAAGE,QAAS,OAChC,kBAACtI,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAS6K,KAAK,OAAOxC,QAAS,EAAGsC,UAAU,UAC/D,kBAAC7K,EAAA,EAAD,CAAMe,MAAI,EAAC+J,IAAE,EAAC7K,WAAS,EAAC8K,KAAK,OAAO7K,QAAQ,SAAS0D,WAAW,SAAS2E,QAAS,GAC9E,kBAACvI,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAAC+J,IAAE,EAACnH,aAAa,SAASC,WAAW,SAAS1D,QAAQ,SAAS6K,KAAK,QACpF,yBACIxI,IAAK1C,EAAS,IAAMS,EAAE,GAAGmC,MAAM,KAAK,GAAK,IAAM0E,eAAexE,QAAQ,UAAY,IAAMrC,EAAE,GAAGmC,MAAM,KAAK,GACxGxB,MAAO,CAAE6H,SAAU,QACnBlG,IAAI,MAEZ,kBAAC5C,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAAC+J,IAAE,EAACnH,aAAa,SAASC,WAAW,SAAS1D,QAAQ,SAAS6K,KAAK,QACpF,kBAACsB,EAAA,EAAD,KACI,kBAAC,IAAD,CAAqBvJ,OAAQ,IAAKwJ,SAAU,KACxC,kBAAC,IAAD,CAAelM,KAAMA,GACjB,kBAAC,IAAD,CAAOoD,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACIjC,MAAM,SACN2B,cAAc,SACdC,QAAS,kBACL,kBAACoJ,EAAA,EAAD,CAAMtL,MAAO,CAAEmB,QAAS,OAAQoK,cAAe,MAAOC,SAAU,OAAQC,YAAa,QACjF,wBAAIzL,MAAO,CAAEK,MAAO,QAASgC,cAAe,SAAUjB,YAAa,OAC/D,kBAACjB,EAAA,EAAD,CAAYC,QAAQ,UAAUJ,MAAO,CAAEK,MAAO,UAA9C,qBAIhB,kBAAC,IAAD,CAAKkC,QAAQ,SAELpD,EAAKC,KAAI,SAAC+C,EAAO7C,GAAR,OACL,kBAAC,IAAD,CAAM8C,IAAG,eAAU9C,GAAKkD,KAAM3C,EAAOP,GAAImD,OAAQ5C,EAAOP,SAIpE,kBAAC,IAAD,CAAMiD,QAAQ,YAAYE,OAAO,eAMrD,kBAAC1D,EAAA,EAAD,CAAMe,MAAI,EAAC+J,IAAE,EAAC7K,WAAS,EAAC8K,KAAK,OAAOpH,aAAa,SAASC,WAAW,SAAS1D,QAAQ,SAASqI,QAAS,GACpG,kBAACvI,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAAC+J,IAAE,EAACnH,aAAa,SAASC,WAAW,SAAS1D,QAAQ,SAAS6K,KAAK,QACpF,4BACI,sJACA,iHACA,mGACA,yFAEJ,kBAAClH,EAAA,EAAD,CACIxC,QAAQ,YACRyC,QAAS,EAAK6I,eACdpB,SACyC,OAArC,EAAKpL,MAAMsG,SAASjG,cACU,OAA9B,EAAKL,MAAMsG,SAAS/F,OACkB,OAAtC,EAAKP,MAAMsG,SAAS9F,eACgB,OAApC,EAAKR,MAAMsG,SAAS7F,aACqB,OAAzC,EAAKT,MAAMsG,SAAS5F,kBAR5B,oBAaJ,kBAACb,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAAC+J,IAAE,EAACC,KAAK,QACzB,kBAACsB,EAAA,EAAD,KACI,kBAACnI,EAAA,EAAD,CAAOjD,MAAO,CAAEkD,OAAQ,kBAAmBmI,SAAU,MACjD,kBAACjI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWhD,MAAM,UAAjB,gBACA,kBAACgD,EAAA,EAAD,CAAWhD,MAAM,UAAjB,SACA,kBAACgD,EAAA,EAAD,CAAWhD,MAAM,UAAjB,iBACA,kBAACgD,EAAA,EAAD,CAAWhD,MAAM,UAAjB,eACA,kBAACgD,EAAA,EAAD,CAAWhD,MAAM,UAAjB,qBAEJ,kBAAC+C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWhD,MAAM,WAAkB,IAAPjB,EAAE,IAAUG,QAAQ,GAAK,KACrD,kBAAC8D,EAAA,EAAD,CAAWhD,MAAM,WAAkB,IAAPjB,EAAE,IAAUG,QAAQ,GAAK,KACrD,kBAAC8D,EAAA,EAAD,CAAWhD,MAAM,WAAkB,IAAPjB,EAAE,IAAUG,QAAQ,GAAK,KACrD,kBAAC8D,EAAA,EAAD,CAAWhD,MAAM,WAAkB,IAAPjB,EAAE,IAAUG,QAAQ,GAAK,KACrD,kBAAC8D,EAAA,EAAD,CAAWhD,MAAM,WAAkB,IAAPjB,EAAE,IAAUG,QAAQ,GAAK,MAEzD,kBAAC6D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWhD,MAAM,UACb,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYlB,KAAK,eAAeoB,SAAU,SAAAC,GAAC,OAAI,EAAKC,sBAAsBD,KACtE,kBAACG,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAWC,MAAM,MAAMR,MAAM,QACxD,kBAACK,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAWC,MAAM,KAAKR,MAAM,UAInE,kBAACH,EAAA,EAAD,CAAWhD,MAAM,UACb,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYlB,KAAK,QAAQoB,SAAU,SAAAC,GAAC,OAAI,EAAKC,sBAAsBD,KAC/D,kBAACG,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAWC,MAAM,MAAMR,MAAM,QACxD,kBAACK,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAWC,MAAM,KAAKR,MAAM,UAInE,kBAACH,EAAA,EAAD,CAAWhD,MAAM,UACb,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYlB,KAAK,gBAAgBoB,SAAU,SAAAC,GAAC,OAAI,EAAKC,sBAAsBD,KACvE,kBAACG,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAWC,MAAM,MAAMR,MAAM,QACxD,kBAACK,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAWC,MAAM,KAAKR,MAAM,UAInE,kBAACH,EAAA,EAAD,CAAWhD,MAAM,UACb,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYlB,KAAK,cAAcoB,SAAU,SAAAC,GAAC,OAAI,EAAKC,sBAAsBD,KACrE,kBAACG,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAWC,MAAM,MAAMR,MAAM,QACxD,kBAACK,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAWC,MAAM,KAAKR,MAAM,UAInE,kBAACH,EAAA,EAAD,CAAWhD,MAAM,UACb,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYlB,KAAK,mBAAmBoB,SAAU,SAAAC,GAAC,OAAI,EAAKC,sBAAsBD,KAC1E,kBAACG,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAWC,MAAM,MAAMR,MAAM,QACxD,kBAACK,EAAA,EAAD,CAAkBC,QAAS,kBAACC,EAAA,EAAD,MAAWC,MAAM,KAAKR,MAAM,kBAkBvG,OAJA,EAAKgB,SAAS,CACVF,MAAM,EACN4E,aAAc,wCAEX,EAAKjF,SA3YD,EA+YnBN,sBAAwB,SAACD,GAAO,IAAD,EACHA,EAAEiB,OAAlBtC,EADmB,EACnBA,KAAMmB,EADa,EACbA,MACd,EAAKgB,SAAS,CACVe,SAAS,2BACF,EAAKtG,MAAMsG,UADV,kBAEHlD,EAAOmB,OApZD,EAyZnBiI,eAAiB,WACb,EAAK5M,MAAM6M,cAAa,GACxB,EAAKlH,SAAS,CACVQ,SAAS,IAEbC,MAAMtG,EAAS,aAAe,EAAKM,MAAMuK,aAAamC,mBAAoB,CACtEzG,OAAQ,MACRC,KAAM,OACNC,KAAMC,KAAKC,UAAU,CACjBC,SAAU,EAAKtG,MAAMsG,WAEzBC,QAAS,CACL,eAAgB,sBAErBC,MAAK,SAAAC,GACoB,MAApBA,EAASpH,OACT,EAAKkG,SAAS,CACVQ,SAAS,EACT4G,mBAAmB,EACnBnD,aAAc,KACde,aAAc,KACdd,QAAS,KACTa,OAAO,EACPjF,MAAM,EACN4E,aAAc,gCAGlB,EAAK1E,SAAS,CACVQ,SAAS,EACTyD,aAAc,KACde,aAAc,KACdd,QAAS,KACTa,OAAO,EACPjF,MAAM,EACN4E,aAAc,wCAzb1B,EAAKjK,MAAQ,CACTwJ,aAAc,KACde,aAAc,KACdxE,SAAS,EACT0D,QAAS,KACTa,OAAO,EACPP,YAAa,KACb1E,MAAM,EACN4E,aAAc,GACd2C,eAAe,EACftG,SAAU,CACNjG,aAAc,KACdE,MAAO,KACPC,cAAe,KACfC,YAAa,KACbC,iBAAkB,MAEtBiM,mBAAmB,EACnBtB,eAAgB,GApBL,E,qDAkcf,OAAKtE,KAAKnH,MAAMJ,QAAQA,QA2Bb,kBAAC,EAAD,MA1BHuH,KAAK/G,MAAM+F,QAEP,kBAAClG,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAACb,QAAQ,SAAS0D,WAAW,SAAS3C,MAAO,CAAEsG,UAAW,SAC1E,kBAACC,EAAA,EAAD,CACIC,eAAa,KAIlBP,KAAKnH,MAAMH,OAAOA,OAClBsH,KAAKtH,SACLsH,KAAK/G,MAAMsK,MAEd,kBAACzK,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAS2K,UAAU,SAASjH,WAAW,SAAS3C,MAAO,CAAEsG,UAAW,SACxF,kBAACnG,EAAA,EAAD,CAAYC,QAAQ,MAApB,oDAGA,6BACA,kBAACwC,EAAA,EAAD,CAAQC,QAASoD,KAAKuE,QAAtB,SAMDvE,KAAK0D,kB,GA5dFlD,aAifXC,gBAZS,SAAAxH,GAAK,MAAK,CAC9ByH,OAAQzH,EAAMyH,OACdjI,QAASQ,EAAMR,QACfC,OAAQO,EAAMP,WAGS,SAAAiI,GAAQ,MAAK,CACpC+E,aAAc,SAAApN,GACVqI,EAASjI,EAAOJ,QAITmI,CAA6CG,aA3f7C,SAAAC,GAAK,MAAK,CACrBiF,OAAQ,CACJ5K,QAAS,OACToK,cAAe,SACf5I,WAAY,SACZoF,eAAgB,SAChB7H,UAAW,SAqfyC2G,CAAmBsB,I,UCvgBzE6D,G,kDAEF,WAAYlN,GAAQ,IAAD,8BACf,cAAMA,IAUVoF,MAAQ,kBACJ,kBAACC,EAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CC,KAAM,EAAKrF,MAAMqF,KACjBC,QAAS,kBAAM,EAAKC,SAAS,CAAEF,MAAO,EAAKrF,MAAMqF,QACjDG,iBAAkB,IAClBC,QAAS,EAAKzF,MAAMiK,gBAjBT,EAqBnB8C,WAAa,SAACC,GACiB,KAAxB,EAAKhN,MAAMiN,UAA2C,KAAxB,EAAKjN,MAAMkN,WACxC,EAAKtN,MAAMuN,aAAY,GACvB,EAAK5H,SAAS,CAAEF,MAAM,EAAM4E,aAAc+C,EAAKjH,SAAS,MAxB7C,EA2BnBqH,SAAW,WACP,EAAK7H,SAAS,CACVQ,SAAS,IAEb,EAAKgH,WAAW,wCAChB/G,MAAMtG,EAAS,SAAU,CACrBuG,OAAQ,OACRC,KAAM,OACNC,KAAMC,KAAKC,UAAU,CACjB4G,SAAU,EAAKjN,MAAMiN,SACrBC,SAAU,EAAKlN,MAAMkN,WAEzB3G,QAAS,CACL,eAAgB,sBAGvBC,MAAK,SAAAC,GAIF,OAHuB,MAApBA,EAASpH,QACR,EAAKO,MAAMuN,aAAY,GAEpB1G,EAASS,UACjBV,MAAK,SAAAW,GACqB,OAAtBA,EAAalH,KACZ,EAAKsF,SAAS,CACVQ,SAAS,EACTV,MAAM,EACN4E,aAAc9C,EAAa1B,WAG/B,EAAK7F,MAAMyN,WAAWlG,EAAalH,KAAK6D,IACxC,EAAKlE,MAAM0N,eAAenG,EAAalH,KAAKgN,UAC5CjG,eAAeuG,QAAQ,QAAS,EAAK3N,MAAMR,MAAMA,OACjD4H,eAAeuG,QAAQ,SAAUpG,EAAalH,KAAK6D,IACnDkD,eAAeuG,QAAQ,WAAYpG,EAAalH,KAAKgN,UACrD,EAAK1H,SAAS,CACVQ,SAAS,QAIpBa,OAAO,SAAAnC,GAAC,OAAIiC,QAAQC,IAAIlC,OAlEV,EAqEnBrF,MAAQ,WACJ,OACI,kBAACS,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAAC8J,UAAU,SAAS3K,QAAQ,SAAS0D,WAAW,SAAS3C,MAAO,CAAEsG,UAAW,SACzF,kBAACoG,GAAA,EAAD,CACI9E,OAAO,SACPvH,MAAM,UACNqD,SAAU,SAACpE,GAAO,EAAKmF,SAAS,CAAC0H,SAAU7M,EAAEsF,OAAOnB,SACpDQ,MAAM,WACNjB,GAAG,uBACH5C,QAAQ,WACRuM,WAAW,IAEf,6BACA,kBAACD,GAAA,EAAD,CACIrM,MAAM,UACNqD,SAAU,SAACpE,GAAO,EAAKmF,SAAS,CAAC2H,SAAU9M,EAAEsF,OAAOnB,SACpDQ,MAAM,WACNjB,GAAG,uBACH5C,QAAQ,WACRuM,WAAW,EACXnO,KAAK,aAET,6BACA,kBAACoE,EAAA,EAAD,CAAQC,QAAS,EAAKyJ,SAAUjM,MAAM,WAAtC,SAGC,EAAK6D,UA7FlB,EAAKhF,MAAQ,CACTiN,SAAU,GACVC,SAAU,GACVnH,SAAS,EACTV,MAAM,EACN4E,aAAc,IAPH,E,qDAqGf,OAAGlD,KAAK/G,MAAM+F,QAEN,kBAAClG,EAAA,EAAD,CAAMC,WAAS,EAACc,MAAI,EAACb,QAAQ,SAAS0D,WAAW,SAAS3C,MAAO,CAAEsG,UAAW,SAC1E,kBAACC,EAAA,EAAD,CACIC,eAAa,KAKtBN,eAAexE,QAAQ,SACf,kBAAC,GAAD,MAEAuE,KAAK3H,Y,GAnHRmI,aAmILC,gBAVS,SAAAxH,GAAK,MAAK,CAC9BZ,MAAOY,EAAMZ,UAGU,SAAAsI,GAAQ,MAAK,CACpCyF,YAAa,SAAA9N,GAAWqI,EAAStI,EAAMC,KACvCgO,WAAY,SAAAvJ,GAAO4D,ELzHb,CACFpI,KApBe,UAqBfC,QKuH+BuE,KACnCwJ,eAAgB,SAAAlK,GAASsE,ELjInB,CACFpI,KAdiB,YAejBC,QK+HuC6D,QAGhCoE,CAA8CG,aA3I9C,SAAAC,GAAK,MAAK,CACrBxI,MAAO,CACHoE,aAAa,SACbC,WAAY,SACZoF,eAAgB,aAuIqClB,CAAmBmF,K,oBCrI1EY,G,kDAEF,WAAY9N,GAAQ,IAAD,8BACf,cAAMA,IAYV+N,OAAS,WACL,OACI,6BACA,kBAACC,GAAA,EAAD,CAAQC,SAAS,SACb,kBAACC,GAAA,EAAD,KACI,kBAAC7M,EAAA,EAAD,CAAYC,QAAQ,KAAKJ,MAAO,CAAEmH,SAAU,IAA5C,eACgB,sCAEhB,kBAAChH,EAAA,EAAD,CAAYC,QAAQ,KAAKJ,MAAO,CAAEmH,SAAU,IAEpC,EAAKrI,MAAMR,MAAMA,OAAS4H,eAAexE,QAAQ,UAC3CwE,eAAexE,QAAQ,YACnB,aAEJ,IAGd,kBAACkB,EAAA,EAAD,CAAQvC,MAAM,UAAUwC,QAAS,kBAAM,EAAK/D,MAAM6M,cAAa,KAC1D,EAAK7M,MAAMR,MAAMA,OAAS4H,eAAexE,QAAQ,SAAW,SAAW,IAK5E,kBAACkB,EAAA,EAAD,CAAQvC,MAAM,UAAUwC,QAAS,EAAKoK,QACjC,EAAKnO,MAAMR,MAAMA,OAAS4H,eAAexE,QAAQ,SAAW,UAAY,MAIrF,kBAACsL,GAAA,EAAD,QAzCW,EA8CnBC,OAAS,WACL/G,eAAegH,QACf,EAAKpO,MAAMuN,aAAY,GACvB,EAAKvN,MAAMkH,eAAc,IA/CzB,EAAK9G,MAAQ,CACTqF,MAAM,GAHK,E,qDAqDf,OAAO0B,KAAK4G,a,GAvDCpG,aA8ENC,gBAnBS,SAAAxH,GAAK,MAAK,CAC9BZ,MAAOY,EAAMZ,MACbI,QAASQ,EAAMR,QACfyO,SAAUjO,EAAMiO,aAGO,SAAAvG,GAAQ,MAAK,CACpCyF,YAAa,SAAA9N,GACTqI,EAAStI,EAAMC,KAEnByH,cAAe,SAAAzH,GACXqI,EAASlI,EAAQH,KAErBoN,aAAc,SAAApN,GACVqI,EAASjI,EAAOJ,QAKTmI,CAA6CG,aArF7C,SAAAC,GAAK,MAAK,CACrBG,QAASH,EAAME,OAAOC,QACtBmG,OAAQ,CACJxL,MAAO,QAkF6CiF,CAAmB+F,KCpEhES,OAlBf,WACE,OACI,kBAAC,WAAD,KACI,kBAAC,GAAD,MACA,kBAAC,GAAD,QCGUC,QACW,cAA7B7C,OAAOC,SAAS6C,UAEe,UAA7B9C,OAAOC,SAAS6C,UAEhB9C,OAAOC,SAAS6C,SAASC,MACvB,2D,aCfAC,GAAe,CACjBnP,OAAO,EACP2G,SAAS,GA8DAyI,GAAcC,2BAAgB,CACvCrP,MA5DiB,WAAmC,IAAlCY,EAAiC,uDAAzBuO,GAAcG,EAAW,uCACnD,OAAOA,EAAOpP,MACV,ITVa,QSWT,OAAO,2BACAU,GADP,IAEIZ,MAAOsP,EAAOnP,UAEtB,QACI,OAAOS,IAqDfiO,SAjDoB,WAAmC,IAAlCjO,EAAiC,uDAAzBuO,GAAcG,EAAW,uCACtD,OAAOA,EAAOpP,MACV,ITrBiB,YSsBb,OAAO,2BACAU,GADP,IAEIiO,SAAUS,EAAOnP,UAEzB,QACI,OAAOS,IA0CfyH,OAtCkB,WAAmC,IAAlCzH,EAAiC,uDAAzBuO,GAAcG,EAAW,uCACpD,OAAOA,EAAOpP,MACV,IThCe,USiCX,OAAO,2BACAU,GADP,IAEIyH,OAAQiH,EAAOnP,UAEvB,QACI,OAAOS,IA+BfR,QA3BmB,WAAmC,IAAlCQ,EAAiC,uDAAzBuO,GAAcG,EAAW,uCACrD,OAAOA,EAAOpP,MACV,IT3Ce,US4CX,OAAO,2BACAU,GADP,IAEIR,QAASkP,EAAOnP,UAExB,QACI,OAAOS,IAoBfP,OAhBkB,WAAmC,IAAlCO,EAAiC,uDAAzBuO,GAAcG,EAAW,uCACpD,OAAQA,EAAOpP,MACX,ITtDc,SSuDV,OAAO,2BACAU,GADP,IAEIP,OAAQiP,EAAOnP,UAEvB,QAAS,OAAOS,M,UC3DX2O,GAAQC,uBAAYJ,GAAaK,kCCI9CC,IAASC,OACL,kBAAC,IAAD,CAAUJ,MAAOA,IACb,kBAAC,GAAD,OAEJK,SAASC,eAAe,SHuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5I,MAAK,SAAA6I,GACJA,EAAaC,gBAEd1I,OAAM,SAAA4D,GACL9D,QAAQ8D,MAAMA,EAAM/E,c","file":"static/js/main.af6ae7d4.chunk.js","sourcesContent":["export const LOGIN = 'LOGIN'\r\nexport const USER_NAME = 'USER_NAME'\r\nexport const USER_ID = 'USER_ID'\r\nexport const HISTORY = 'HISTORY'\r\nexport const RESULT = 'RESULT'\r\n\r\nexport const login = (status) => {\r\n    return{\r\n        type: LOGIN,\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const userName = (userName) => {\r\n    return{\r\n        type: USER_NAME,\r\n        payload: userName\r\n    }\r\n}\r\n\r\nexport const userId = (userId) => {\r\n    return{\r\n        type: USER_ID,\r\n        payload: userId\r\n    }\r\n}\r\n\r\nexport const history = (status) => {\r\n    return {\r\n        type: HISTORY,\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const result = (status) => {\r\n    return {\r\n        type: RESULT,\r\n        payload: status\r\n    }\r\n}\r\n","// export const server = 'http://localhost:8182'\r\nexport const server = 'https://xray.deepnets.in'\r\n","import React from 'react';\r\nimport {Component} from 'react';\r\nimport './History.css';\r\nimport UploadImage from '../UploadImage/UploadImage';\r\nimport {connect} from 'react-redux';\r\nimport {history} from '../../redux/action';\r\nimport {server} from '../../properties';\r\nimport {BarChart, XAxis, YAxis, Bar, Tooltip, CartesianGrid, Legend, LabelList, Line, ComposedChart, Cell} from 'recharts';\r\nimport {\r\n    Grid,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    withStyles,\r\n    Typography,\r\n    FormControlLabel,\r\n    Radio,\r\n    RadioGroup,\r\n    Table,\r\n    CircularProgress, Snackbar, FormControl\r\n} from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    offset: theme.mixins.toolbar,\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    img: {\r\n        margin: 'auto',\r\n        display: 'block',\r\n        maxWidth: '400',\r\n        maxHeight: '400',\r\n    },\r\n    item: {\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    }\r\n})\r\n\r\nclass History extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            key: [],\r\n            home: false,\r\n            loading: false,\r\n            open: false,\r\n            message: '',\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.setState({loading: true})\r\n        fetch(server + '/history/' + sessionStorage.getItem('UserId'), {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then(respose => respose.json())\r\n            .then(responseJson => {\r\n                this.setState({\r\n                    data: responseJson.data,\r\n                    loading: false\r\n                })\r\n            }).catch(e => console.log(e))\r\n    }\r\n\r\n    history = () => {\r\n        return (\r\n            <Grid container justify='center'>\r\n                {\r\n                    this.state.data.map((d, i) => {\r\n                        const data = [\r\n                            {\r\n                                'name': 'Cardiomegaly',\r\n                                'value': (d.cardiomegaly * 100).toFixed(2),\r\n                                'threshold': 46.52,\r\n                            }, {\r\n                                'name': 'Edema',\r\n                                'value': (d.edema * 100).toFixed(2),\r\n                                'threshold': 71.05,\r\n                            }, {\r\n                            'name': 'Consolidation',\r\n                                'value': (d.consolidation * 100).toFixed(2),\r\n                                'threshold': 65.9,\r\n                            }, {\r\n                            'name': 'Atelectasis',\r\n                                'value': (d.atelectasis * 100).toFixed(2),\r\n                                'threshold': 54.93,\r\n                            }, {\r\n                            'name': 'Pleural Effusion',\r\n                                'value': (d.pleural_effusion * 100).toFixed(2),\r\n                                'threshold': 34.61,\r\n                            }\r\n                        ]\r\n                        const colors = ['#5BC0EB','#FDE74C','#9BC53D','#E55934','#FA7921']\r\n                        return (\r\n                            <Grid container item xs={12} style={{background: 'aliceblue', marginTop: '1%'}}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant='h5' color='primary' align='center'>\r\n                                        {new Intl.DateTimeFormat(\"en-GB\", {\r\n                                            year: \"numeric\",\r\n                                            month: \"long\",\r\n                                            day: \"2-digit\",\r\n                                            hour: \"numeric\",\r\n                                            minute: \"numeric\",\r\n                                            second: \"numeric\",\r\n                                            hour12: true,\r\n                                            //   timeZoneName: 'short'\r\n                                        }).format(new Date(d.access_dts))}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <img\r\n                                        style={{display: 'block', marginRight: 'auto', marginLeft: 'auto'}}\r\n                                        src={server + '/' + d.image_path.split('.')[0] + '_' + localStorage.getItem('UserId') + '.' + d.image_path.split('.')[1]}\r\n                                        alt=''\r\n                                        width={400}\r\n                                        height={400}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <ComposedChart\r\n                                        style={{fontSize: 'calc(5px + 2vmin)'}}\r\n                                        width={1000}\r\n                                        height={400}\r\n                                        data={data}>\r\n                                        <XAxis tick={false}/>\r\n                                        <YAxis/>\r\n                                        <Legend align='right' layout='vertical' verticalAlign='middle' content={() => (\r\n                                            <ul>\r\n                                                 {\r\n                                                    data.map((entry, i) => (\r\n                                                        <li key={i} style={{ color: colors[i], listStyleType: 'square' }}>\r\n                                                            <p style={{ color: \"black\" }}>{entry.name}</p>\r\n                                                        </li>\r\n                                                    ))\r\n                                                }\r\n                                            </ul>\r\n                                        )}/>\r\n                                        <Bar dataKey='value'>\r\n                                            {\r\n                                                data.map((entry, i ) => (\r\n                                                    <Cell key={`cell-${i}`} fill={colors[i]} stroke={colors[i]} />\r\n                                                ))\r\n                                            }\r\n                                        </Bar>\r\n                                        <Line dataKey='threshold'/>\r\n                                    </ComposedChart>\r\n                                </Grid>\r\n                                <Grid container item xs={4} alignContent='center' alignItems='center' justify='center'>\r\n                                    <Button onClick={() => this.updateFeedbackHandler(i, d.userFeedback.id)}>\r\n                                        Update feedback\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid container item xs={8}>\r\n                                    <Table style={{border: '2px solid black', marginRight: '2%', marginBottom: '2%'}}>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell align='center'>Cardiomegaly</TableCell>\r\n                                                <TableCell align='center'>Edema</TableCell>\r\n                                                <TableCell align='center'>Consolidation</TableCell>\r\n                                                <TableCell align='center'>Atelectasis</TableCell>\r\n                                                <TableCell align='center'>Pleural effusion</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell\r\n                                                    align='center'>{(d.cardiomegaly * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d.edema * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell\r\n                                                    align='center'>{(d.consolidation * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell\r\n                                                    align='center'>{(d.atelectasis * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell\r\n                                                    align='center'>{(d.pleural_effusion * 100).toFixed(2) + '%'}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='cardiomegaly'\r\n                                                                    value={d.userFeedback.cardiomegaly}\r\n                                                                    onChange={e => this.feedbackChangeHandler(e, d.userFeedback.user_access_details_id)}>\r\n                                                            <FormControlLabel control={<Radio/>} label='Yes'\r\n                                                                              value='Yes'/>\r\n                                                            <FormControlLabel control={<Radio/>} label='No' value='No'/>\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='edema' value={d.userFeedback.edema}\r\n                                                                    onChange={e => this.feedbackChangeHandler(e, d.userFeedback.user_access_details_id)}>\r\n                                                            <FormControlLabel control={<Radio/>} label='Yes'\r\n                                                                              value='Yes'/>\r\n                                                            <FormControlLabel control={<Radio/>} label='No' value='No'/>\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='consolidation'\r\n                                                                    value={d.userFeedback.consolidation}\r\n                                                                    onChange={e => this.feedbackChangeHandler(e, d.userFeedback.user_access_details_id)}>\r\n                                                            <FormControlLabel control={<Radio/>} label='Yes'\r\n                                                                              value='Yes'/>\r\n                                                            <FormControlLabel control={<Radio/>} label='No' value='No'/>\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='atelectasis'\r\n                                                                    value={d.userFeedback.atelectasis}\r\n                                                                    onChange={e => this.feedbackChangeHandler(e, d.userFeedback.user_access_details_id)}>\r\n                                                            <FormControlLabel control={<Radio/>} label='Yes'\r\n                                                                              value='Yes'/>\r\n                                                            <FormControlLabel control={<Radio/>} label='No' value='No'/>\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='pleural_effusion'\r\n                                                                    value={d.userFeedback.pleural_effusion}\r\n                                                                    onChange={e => this.feedbackChangeHandler(e, d.userFeedback.user_access_details_id)}>\r\n                                                            <FormControlLabel control={<Radio/>} label='Yes'\r\n                                                                              value='Yes'/>\r\n                                                            <FormControlLabel control={<Radio/>} label='No' value='No'/>\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                {this.alert()}\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    alert = () => (\r\n        <Snackbar\r\n            anchorOrigin={{vertical: \"top\", horizontal: \"center\"}}\r\n            open={this.state.open}\r\n            onClose={() => this.setState({open: !this.state.open})}\r\n            autoHideDuration={2000}\r\n            message={this.state.message}\r\n        />\r\n    )\r\n\r\n    feedbackChangeHandler = (e, id) => {\r\n        const {name, value} = e.target;\r\n        var index = this.state.data.findIndex(x => x.userFeedback.user_access_details_id === id);\r\n        var newState = [...this.state.data]\r\n        newState[index].userFeedback = {\r\n            ...newState[index].userFeedback,\r\n            [name]: value\r\n        }\r\n        this.setState({\r\n            data: newState\r\n        })\r\n    }\r\n\r\n    updateFeedbackHandler = (index, id) => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        fetch(server + '/feedback/' + id, {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            body: JSON.stringify({\r\n                feedback: this.state.data[index].userFeedback\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => {\r\n                console.log(response)\r\n                if (response.status === 200) {\r\n                    this.setState({\r\n                        loading: false,\r\n                        open: true,\r\n                        message: 'Feedback successfully updated'\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        loading: false,\r\n                        open: true,\r\n                        message: 'Error in updating feedback, try after some time'\r\n                    })\r\n                }\r\n            }\r\n        ).catch(e => {\r\n            this.setState({\r\n                loading: false,\r\n                open: true,\r\n                message: e\r\n            })\r\n        })\r\n    }\r\n\r\n    home = () => {\r\n        this.props.historyAction(false);\r\n        this.setState({\r\n            home: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (\r\n                <Grid container item justify='center' alignItems='center' style={{minHeight: '80vh'}}>\r\n                    <CircularProgress\r\n                        disableShrink\r\n                    />\r\n                </Grid>\r\n            )\r\n        } else {\r\n            if (this.state.home) {\r\n                return <UploadImage/>\r\n            } else {\r\n                return this.history();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    userId: state.userId\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    historyAction: status => {\r\n        dispatch(history(status))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(History));\r\n","export const threshold = {\r\n    Cardiomegaly: 46.52,\r\n    Edema: 67.46,\r\n    Consolidation: 65.90,\r\n    Atelectasis: 54.93,\r\n    Pleural_Effusion: 43.74,\r\n}","import React, { Component } from 'react';\r\nimport './UploadImage.css';\r\nimport History from '../History/History';\r\nimport { connect } from 'react-redux';\r\nimport { server } from '../../properties';\r\nimport { XAxis, YAxis, Legend, Bar, Cell, ComposedChart, Line, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Snackbar,\r\n    Typography,\r\n    Grid,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    RadioGroup, FormControlLabel, Radio, Table, FormControl, TableContainer, List, Paper, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Checkbox, FormGroup\r\n} from '@material-ui/core';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { history, result } from \"../../redux/action\";\r\nimport { threshold } from '../../constants/threshold';\r\nimport { PhotoCamera } from '@material-ui/icons';\r\nimport { styled } from '@material-ui/styles';\r\n\r\nconst Input = styled('input')({\r\n    display: 'none',\r\n});\r\n\r\nconst styles = theme => ({\r\n    upload: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        marginTop: '5%'\r\n    },\r\n})\r\n\r\nclass UploadImage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedFile: null,\r\n            responseData: null,\r\n            loading: false,\r\n            preview: null,\r\n            limit: false,\r\n            invalidFile: null,\r\n            open: false,\r\n            alertMessage: '',\r\n            isFeedbackSet: false,\r\n            feedback: {\r\n                cardiomegaly: null,\r\n                edema: null,\r\n                consolidation: null,\r\n                atelectasis: null,\r\n                pleural_effusion: null\r\n            },\r\n            feedbackSubmitted: false,\r\n            inputSelection: 0,\r\n        }\r\n    }\r\n\r\n    onChangeHandler = event => {\r\n        var reader = new FileReader();\r\n        const file = event.target.files[0];\r\n        this.setState({\r\n            selectedFile: null,\r\n            preview: null\r\n        })\r\n        if (file) {\r\n            const fileName = event.target.files[0].name;\r\n            const extension = fileName.substring(fileName.lastIndexOf('.') + 1);\r\n            if (extension === 'jpg' || extension === 'png' || extension === 'jpeg' || extension === 'JPG' || extension === 'PNG' || extension === 'JPEG') {\r\n                reader.onloadend = () => {\r\n                    this.setState({\r\n                        invalidFile: false,\r\n                        selectedFile: file,\r\n                        preview: reader.result\r\n                    })\r\n                }\r\n                reader.readAsDataURL(file)\r\n            } else {\r\n                this.setState({\r\n                    invalidFile: true,\r\n                    open: true,\r\n                    alertMessage: 'Invalid file.'\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    calculate = () => {\r\n        console.log('State: ', this.state)\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        if (this.state.selectedFile === null) {\r\n            alert(\"Please select file.\")\r\n            this.setState({\r\n                loading: false,\r\n                open: true,\r\n                alertMessage: 'Please select file.'\r\n            })\r\n        } else {\r\n            let data = new FormData();\r\n            data.append('image', this.state.selectedFile)\r\n            data.append('cardiomegaly', this.state.cardiomegaly)\r\n            data.append('edema', this.state.edema)\r\n            data.append('consolidation', this.state.consolidation)\r\n            data.append('atelectasis', this.state.atelectasis)\r\n            data.append('pleural_effusion', this.state.pleural_effusion)\r\n            data.append('none', this.state.none)\r\n\r\n            fetch(server + \"/calculate/\" + sessionStorage.getItem('UserId'), {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                body: data,\r\n                headers: {\r\n                    \"Accept\": \"application/form-data\",\r\n                    \"Access-Control-Allow-Origin\": \"*\"\r\n                },\r\n            }).then(response => response.json())\r\n                .then(responseJson => {\r\n                    if (responseJson.data === null) {\r\n                        this.setState({\r\n                            loading: false,\r\n                            limit: true\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            loading: false,\r\n                            responseData: responseJson.data,\r\n                            preview: null,\r\n                            selectedFile: null,\r\n                            open: true,\r\n                            alertMessage: 'File submitted successfully'\r\n                        })\r\n                        // this.props.resultAction(true)\r\n                    }\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    }\r\n\r\n    uploadImage = () => {\r\n        return (\r\n            <div style={{ flexGrow: 1, padding: '3%', margin: '3%' }}>\r\n                <Grid container direction='row' sm wrap='wrap' alignItems='center' alignContent='center' justify='center' spacing={2} >\r\n                    <Grid container sm={4} direction='column' justify='center' alignItems='center' wrap='wrap'>\r\n                        <Grid container item sm direction='column' justify='center' alignItems='center' wrap='wrap'>\r\n                            <Typography style={{ padding: '5px 10px'}} variant='h4'>Instructions</Typography>\r\n                            <Typography style={{ padding: '2px' }}>Sample xray</Typography>\r\n                            <img\r\n                                id=\"target\"\r\n                                src={server + '/sample.jpg'}\r\n                                style={{ maxWidth: '100%' }}\r\n                                alt='sample image'\r\n                            />\r\n                            <br />\r\n                            <ul>\r\n                                <li>Only jpg, jpeg and png images are valid</li>\r\n                                <li>Please upload properly cropped and aligned image<br />(Refer to the sample xray)</li>\r\n                                <li>Please upload only black and white xray image</li>\r\n                                <li>Only chest xrays are supported</li>\r\n                            </ul>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container direction='column' sm wrap='wrap'>\r\n                        <Grid container direction='row' justify='center' alignItems='center' sm wrap='wrap'>\r\n                            <Grid container item direction='column' justify='flex-start' alignItems='center' sm wrap='wrap'>\r\n                                {/* <Typography style={{ padding: '5px 10px', marginTop: '-10%', marginBottom: '15%' }} variant='h4'>2. Upload</Typography> */}\r\n\r\n                                <label htmlFor='upload-button'>\r\n                                    <Input\r\n                                        color='primary'\r\n                                        id='upload-button'\r\n                                        type='file'\r\n                                        accept='image/*'\r\n                                        onChange={this.onChangeHandler}\r\n                                    />\r\n                                    <Button variant=\"contained\" endIcon={<PhotoCamera />} component='span'>\r\n                                        Upload\r\n                                    </Button>\r\n                                </label>\r\n                                <img\r\n                                    id=\"target\"\r\n                                    src={this.state.preview}\r\n                                    style={{ maxWidth: '100%' }}\r\n                                    alt=''\r\n                                />\r\n                                {this.alert()}\r\n                            </Grid>\r\n                            <Grid container item direction='row' justify='flex-start' alignItems='stretch' sm wrap='wrap'>\r\n                                {/* <Typography style={{ padding: '5px 10px', marginTop: '-10%', marginBottom: '17.5%' }} variant='h4'>3. Select</Typography> */}\r\n\r\n                                <Typography variant='h4' >Please select the condition(s) for the uploaded X-Ray</Typography><br />\r\n                                <FormGroup>\r\n                                    <FormControlLabel control={<Checkbox color='primary' name='cardiomegaly' onChange={this.onChange} />} label=\"Cardiomegaly\" />\r\n                                    <FormControlLabel control={<Checkbox color='primary' name='edema' onChange={this.onChange} />} label=\"Edema\" />\r\n                                    <FormControlLabel control={<Checkbox color='primary' name='consolidation' onChange={this.onChange} />} label=\"Consolidation\" />\r\n                                    <FormControlLabel control={<Checkbox color='primary' name='atelectasis' onChange={this.onChange} />} label=\"Atelectasis\" />\r\n                                    <FormControlLabel control={<Checkbox color='primary' name='pleural_effusion' onChange={this.onChange} />} label=\"Pleural Effusion\" />\r\n                                    <FormControlLabel control={<Checkbox color='primary' name='none' onChange={this.onChange} />} label=\"None\" />\r\n                                </FormGroup>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container item direction='row' justify='center' alignItems='baseline' sm wrap='wrap'>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                disabled={this.state.invalidFile || this.state.selectedFile === null || this.state.inputSelection === 0}\r\n                                onClick={this.calculate}\r\n                                variant='contained'\r\n                                style={{ marginRight: '5%', marginTop: '7.5%' }}\r\n                            >\r\n                                Submit\r\n                            </Button>\r\n                            <Button type='reset' onClick={this.goHome} variant='contained'>\r\n                                Cancel\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    goHome = () => {\r\n        window.location.reload();\r\n        // this.setState({\r\n        //     selectedFile: null,\r\n        //     preview: null,\r\n        //     limit: null\r\n        // })\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            [event.target.name]: event.target.checked,\r\n            inputSelection: event.target.checked === true ? this.state.inputSelection + 1 : (this.state.inputSelection === 0 ? 0 : this.state.inputSelection - 1)\r\n        })\r\n    }\r\n\r\n    alert = () => (\r\n        <Snackbar\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            open={this.state.open}\r\n            onClose={() => this.setState({ open: !this.state.open })}\r\n            autoHideDuration={2000}\r\n            message={this.state.alertMessage}\r\n        />\r\n    )\r\n\r\n    result = () => {\r\n        if (this.state.responseData.isError === 'true' && this.state.responseData.message == 'Raising error: unwantedImage') {\r\n            return (\r\n                <Dialog\r\n                    open={this.state.responseData.isError === 'true' && this.state.responseData.message == 'Raising error: unwantedImage'}\r\n                    onClose={this.goHome}\r\n                >\r\n                    <DialogTitle style={{ backgroundColor: '#3F51B5', color: 'white' }}>{\"Invalid Image\"}</DialogTitle>\r\n                    <DialogContent style={{ marginTop: 20 }}>\r\n                        <DialogContentText color='black'>\r\n                            Please upload valid chest x-ray image.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.goHome}>\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            )\r\n        } else if (this.state.responseData.isError === 'false') {\r\n            const d = this.state.responseData.result;\r\n            const data = [\r\n                {\r\n                    'name': 'Cardiomegaly',\r\n                    'value': (d[2] * 100).toFixed(2),\r\n                    'threshold': threshold.Cardiomegaly,\r\n                }, {\r\n                    'name': 'Edema',\r\n                    'value': (d[3] * 100).toFixed(2),\r\n                    'threshold': threshold.Edema,\r\n                }, {\r\n                    'name': 'Consolidation',\r\n                    'value': (d[4] * 100).toFixed(2),\r\n                    'threshold': threshold.Consolidation,\r\n                }, {\r\n                    'name': 'Atelectasis',\r\n                    'value': (d[5] * 100).toFixed(2),\r\n                    'threshold': threshold.Atelectasis,\r\n                }, {\r\n                    'name': 'Pleural Effusion',\r\n                    'value': (d[6] * 100).toFixed(2),\r\n                    'threshold': threshold.Pleural_Effusion,\r\n                }\r\n            ]\r\n            const colors = ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921']\r\n            return (\r\n                <div style={{ flexGrow: 1, padding: '5%' }}>\r\n                    <Grid container justify='center' wrap='wrap' spacing={1} direction='column'>\r\n                        <Grid item sm container wrap='wrap' justify='center' alignItems='center' spacing={1} >\r\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\r\n                                <img\r\n                                    src={server + '/' + d[1].split('.')[0] + '_' + sessionStorage.getItem('UserId') + '.' + d[1].split('.')[1]}\r\n                                    style={{ maxWidth: '100%' }}\r\n                                    alt='' />\r\n                            </Grid>\r\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\r\n                                <TableContainer>\r\n                                    <ResponsiveContainer height={400} minWidth={700}>\r\n                                        <ComposedChart data={data}>\r\n                                            <XAxis dataKey='name' />\r\n                                            <YAxis />\r\n                                            <Tooltip />\r\n                                            <Legend\r\n                                                align='center'\r\n                                                verticalAlign='bottom'\r\n                                                content={() => (\r\n                                                    <List style={{ display: 'flex', flexDirection: \"row\", flexWrap: 'wrap', paddingLeft: '10%' }}>\r\n                                                        <li style={{ color: 'black', listStyleType: 'square', marginRight: '5%' }}>\r\n                                                            <Typography variant='caption' style={{ color: \"black\" }}>cut-off line</Typography>\r\n                                                        </li>\r\n                                                    </List>\r\n                                                )} />\r\n                                            <Bar dataKey='value'>\r\n                                                {\r\n                                                    data.map((entry, i) => (\r\n                                                        <Cell key={`cell-${i}`} fill={colors[i]} stroke={colors[i]} />\r\n                                                    ))\r\n                                                }\r\n                                            </Bar>\r\n                                            <Line dataKey='threshold' stroke='black' />\r\n                                        </ComposedChart>\r\n                                    </ResponsiveContainer>\r\n                                </TableContainer>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item sm container wrap='wrap' alignContent='center' alignItems='center' justify='center' spacing={1}>\r\n                            <Grid container item sm alignContent='center' alignItems='center' justify='center' wrap='wrap'>\r\n                                <ul>\r\n                                    <li>Bar graph of any condition above the cut-off line indicates the positive result of that condition in the supplied xray</li>\r\n                                    <li>Please submit your analysis of xray conditions through the table below the graph.</li>\r\n                                    <li>Select Yes/No for all conditions and press 'Submit Feedback' button</li>\r\n                                    <li>Please refrain from submitting incomplete/wrong feedback</li>\r\n                                </ul>\r\n                                <Button\r\n                                    variant='contained'\r\n                                    onClick={this.submitFeedback}\r\n                                    disabled={\r\n                                        this.state.feedback.cardiomegaly === null ||\r\n                                        this.state.feedback.edema === null ||\r\n                                        this.state.feedback.consolidation === null ||\r\n                                        this.state.feedback.atelectasis === null ||\r\n                                        this.state.feedback.pleural_effusion === null\r\n                                    }>\r\n                                    Submit feedback\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid container item sm wrap='wrap'>\r\n                                <TableContainer>\r\n                                    <Table style={{ border: '2px solid black', minWidth: 650 }}>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell align='center'>Cardiomegaly</TableCell>\r\n                                                <TableCell align='center'>Edema</TableCell>\r\n                                                <TableCell align='center'>Consolidation</TableCell>\r\n                                                <TableCell align='center'>Atelectasis</TableCell>\r\n                                                <TableCell align='center'>Pleural effusion</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell align='center'>{(d[2] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[3] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[4] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[5] * 100).toFixed(2) + '%'}</TableCell>\r\n                                                <TableCell align='center'>{(d[6] * 100).toFixed(2) + '%'}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='cardiomegaly' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='edema' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='consolidation' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='atelectasis' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                    <FormControl>\r\n                                                        <RadioGroup name='pleural_effusion' onChange={e => this.feedbackChangeHandler(e)}>\r\n                                                            <FormControlLabel control={<Radio />} label='Yes' value='Yes' />\r\n                                                            <FormControlLabel control={<Radio />} label='No' value='No' />\r\n                                                        </RadioGroup>\r\n                                                    </FormControl>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            )\r\n        } else {\r\n            this.setState({\r\n                open: true,\r\n                alertMessage: 'Error occured, contact system admin'\r\n            })\r\n            return this.alert();\r\n        }\r\n    }\r\n\r\n    feedbackChangeHandler = (e) => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            feedback: {\r\n                ...this.state.feedback,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    submitFeedback = () => {\r\n        this.props.resultAction(false)\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        fetch(server + '/feedback/' + this.state.responseData.feedbackResponseId, {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            body: JSON.stringify({\r\n                feedback: this.state.feedback\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                this.setState({\r\n                    loading: false,\r\n                    feedbackSubmitted: true,\r\n                    selectedFile: null,\r\n                    responseData: null,\r\n                    preview: null,\r\n                    limit: false,\r\n                    open: true,\r\n                    alertMessage: 'feedback added successfully'\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    loading: false,\r\n                    selectedFile: null,\r\n                    responseData: null,\r\n                    preview: null,\r\n                    limit: false,\r\n                    open: true,\r\n                    alertMessage: 'error while submitting feedback'\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.history.history) {\r\n            if (this.state.loading) {\r\n                return (\r\n                    <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                        <CircularProgress\r\n                            disableShrink\r\n                        />\r\n                    </Grid>\r\n                )\r\n            } else if (this.props.result.result) {\r\n                return this.result();\r\n            } else if (this.state.limit) {\r\n                return (\r\n                    <Grid container justify='center' direction='column' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                        <Typography variant=\"h4\">\r\n                            You have reached max limit. Please contact admin\r\n                        </Typography>\r\n                        <br />\r\n                        <Button onClick={this.goHome}>\r\n                            Home\r\n                        </Button>\r\n                    </Grid>\r\n                )\r\n            } else {\r\n                return this.uploadImage();\r\n            }\r\n        } else {\r\n            return <History />\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    userId: state.userId,\r\n    history: state.history,\r\n    result: state.result\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    resultAction: status => {\r\n        dispatch(result(status))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(UploadImage));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { login, userId, userName } from '../../redux/action';\r\nimport UploadImage from '../UploadImage/UploadImage';\r\nimport { server } from '../../properties';\r\nimport { Button, TextField, CircularProgress, Snackbar, Grid, withStyles } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    login: {\r\n        alignContent:'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    }\r\n})\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            loading: false,\r\n            open: false,\r\n            alertMessage: ''\r\n        }\r\n    }\r\n\r\n    alert = () => (\r\n        <Snackbar\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            open={this.state.open}\r\n            onClose={() => this.setState({ open: !this.state.open })}\r\n            autoHideDuration={3000}\r\n            message={this.state.alertMessage}\r\n        />\r\n    )\r\n\r\n    ckeckInput = (msg) => {\r\n        if(this.state.username === '' || this.state.password === ''){\r\n            this.props.loginAction(false)\r\n            this.setState({ open: true, alertMessage: msg, loading: false })\r\n        }\r\n    }\r\n    onSubmit = () => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        this.ckeckInput('username or password cannot be empty');\r\n        fetch(server + '/login', {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            body: JSON.stringify({\r\n                username: this.state.username,\r\n                password: this.state.password\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(response => {\r\n            if(response.status === 200) {\r\n                this.props.loginAction(true)\r\n            }\r\n            return response.json()\r\n        }).then(responseJson => {\r\n            if(responseJson.data === null) {\r\n                this.setState({\r\n                    loading: false,\r\n                    open: true,\r\n                    alertMessage: responseJson.message\r\n                })\r\n            }else {\r\n                this.props.userAction(responseJson.data.id)\r\n                this.props.userNameAction(responseJson.data.username)\r\n                sessionStorage.setItem('Login', this.props.login.login)\r\n                sessionStorage.setItem('UserId', responseJson.data.id)\r\n                sessionStorage.setItem('UserName', responseJson.data.username)\r\n                this.setState({\r\n                    loading: false\r\n                })\r\n            }\r\n        })\r\n        .catch( e => console.log(e) )\r\n    }\r\n\r\n    login = () => {\r\n        return (\r\n            <Grid container item direction='column' justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                    <TextField\r\n                        margin='normal'\r\n                        color='primary'\r\n                        onChange={(i) => {this.setState({username: i.target.value})}}\r\n                        label=\"Username\"\r\n                        id=\"outlined-size-normal\"\r\n                        variant=\"outlined\"\r\n                        fullWidth={false}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                        color='primary'\r\n                        onChange={(i) => {this.setState({password: i.target.value})}}\r\n                        label=\"Password\"\r\n                        id=\"outlined-size-normal\"\r\n                        variant=\"outlined\"\r\n                        fullWidth={false}\r\n                        type='password'\r\n                    />\r\n                    <br/>\r\n                    <Button onClick={this.onSubmit} color='primary'>\r\n                        Login\r\n                    </Button>\r\n                    {this.alert()}\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading) {\r\n            return (\r\n                <Grid container item justify='center' alignItems='center' style={{ minHeight: '80vh' }}>\r\n                    <CircularProgress\r\n                        disableShrink\r\n                    />\r\n                </Grid>\r\n            )\r\n        } else {\r\n            if(sessionStorage.getItem('Login')) {\r\n                return <UploadImage />\r\n            } else {\r\n                return this.login()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    login: state.login\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loginAction: status => {dispatch(login(status))},\r\n    userAction: id => {dispatch(userId(id))},\r\n    userNameAction: name => {dispatch(userName(name))},\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (withStyles(styles)(Login));\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {login, history, result} from '../../redux/action';\r\nimport {AppBar, Toolbar, Typography, Button } from '@material-ui/core';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme => ({\r\n    toolbar: theme.mixins.toolbar,\r\n    drawer: {\r\n        width: 250\r\n    }\r\n})\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n        }\r\n    }\r\n\r\n    // toggleDrawer = (status) => {\r\n    //     this.setState({\r\n    //         open: status\r\n    //     })\r\n    // }\r\n\r\n    header = () => {\r\n        return (\r\n            <div>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\r\n                        Smart X-Ray <sup>BETA</sup>\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\r\n                        {\r\n                            this.props.login.login || sessionStorage.getItem('Login')\r\n                                ? sessionStorage.getItem('UserName') === null\r\n                                    ? 'Hi, there'/*+this.props.userName.userName*/\r\n                                : 'Hi, there'/*+sessionStorage.getItem('UserName')*/\r\n                                : ''\r\n                        }\r\n                    </Typography>\r\n                    <Button color=\"inherit\" onClick={() => this.props.resultAction(false)}>\r\n                        {this.props.login.login || sessionStorage.getItem('Login') ? 'Upload' : ''}\r\n                    </Button>\r\n                    {/*<Button color=\"inherit\" onClick={() => this.props.historyAction(true)}>\r\n                        {this.props.login.login || sessionStorage.getItem('Login') ? 'History' : ''}\r\n                    </Button>*/}\r\n                    <Button color=\"inherit\" onClick={this.logout}>\r\n                        {this.props.login.login || sessionStorage.getItem('Login') ? 'SIGNOUT' : ''}\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    logout = () => {\r\n        sessionStorage.clear();\r\n        this.props.loginAction(false);\r\n        this.props.historyAction(false);\r\n    }\r\n\r\n    render() {\r\n        return this.header();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    login: state.login,\r\n    history: state.history,\r\n    userName: state.userName,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loginAction: status => {\r\n        dispatch(login(status))\r\n    },\r\n    historyAction: status => {\r\n        dispatch(history(status))\r\n    },\r\n    resultAction: status => {\r\n        dispatch(result(status))\r\n    }\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Header));\r\n","import React, { Fragment } from 'react';\r\nimport './App.css';\r\nimport Login from './components/Login/Login';\r\nimport Header from './components/Header/Header';\r\n\r\nfunction App() {\r\n  return (\r\n      <Fragment>\r\n          <Header/>\r\n          <Login/>\r\n          {/* <footer  style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}><p>A product by Deep Brain Lab</p></footer> */}\r\n      </Fragment>\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     <Header />\r\n    //   </header>\r\n    //   <body className=\"App-body\">\r\n    //     <Login />\r\n    //   </body>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {USER_NAME, LOGIN, USER_ID, HISTORY, RESULT} from './action';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst initialState = {\r\n    login: false,\r\n    loading: false\r\n}\r\n\r\nconst loginReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LOGIN :\r\n            return {\r\n                ...state,\r\n                login: action.payload\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nconst userNameReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case USER_NAME :\r\n            return {\r\n                ...state,\r\n                userName: action.payload\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nconst userIdReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case USER_ID :\r\n            return {\r\n                ...state,\r\n                userId: action.payload\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nconst historyReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case HISTORY :\r\n            return {\r\n                ...state,\r\n                history: action.payload\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nconst resultReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case RESULT :\r\n            return {\r\n                ...state,\r\n                result: action.payload\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    userName: userNameReducer,\r\n    userId: userIdReducer,\r\n    history: historyReducer,\r\n    result: resultReducer\r\n})\r\n","import { createStore } from 'redux';\r\nimport { rootReducer } from './reducer';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools())","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}